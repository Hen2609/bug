import {
  require_escape_quotes
} from "./chunk-B57242OF.js";
import {
  __commonJS
} from "./chunk-TWLJ45QX.js";

// node_modules/marko/src/core-tags/core/await/reorderer-renderer.js
var require_reorderer_renderer = __commonJS({
  "node_modules/marko/src/core-tags/core/await/reorderer-renderer.js"(exports, module) {
    var escapeDoubleQuotes = require_escape_quotes().___escapeDoubleQuotes;
    module.exports = function(input, out) {
      if (out.isSync()) {
        return;
      }
      var global = out.global;
      if (global.__awaitReordererInvoked) {
        return;
      }
      global.__awaitReordererInvoked = true;
      if (out.global.___clientReorderContext) {
        out.flush();
      }
      var asyncOut = out.beginAsync({
        last: true,
        timeout: -1,
        name: "await-reorderer"
      });
      out.onLast(function(next) {
        var awaitContext = global.___clientReorderContext;
        var remaining;
        if (!awaitContext || !awaitContext.instances || !(remaining = awaitContext.instances.length)) {
          asyncOut.end();
          next();
          return;
        }
        function handleAwait(awaitInfo) {
          awaitInfo.out.on("___toString", out.emit.bind(out, "___toString")).on("finish", function(result) {
            if (!global._afRuntime) {
              asyncOut.script(
                `function $af(d,a,e,l,g,h,k,b,f,c){c=$af;if(a&&!c[a])(c[a+="$"]||(c[a]=[])).push(d);else{e=document;l=e.getElementById("af"+d);g=e.getElementById("afph"+d);h=e.createDocumentFragment();k=l.childNodes;b=0;for(f=k.length;b<f;b++)h.appendChild(k.item(0));g&&g.parentNode.replaceChild(h,g);c[d]=1;if(a=c[d+"$"])for(b=0,f=a.length;b<f;b++)c(a[b])}}`
              );
              global._afRuntime = true;
            }
            if (global.cspNonce) {
              asyncOut.write(
                '<style nonce="' + escapeDoubleQuotes(global.cspNonce) + '">#af' + awaitInfo.id + '{display:none;}</style><div id="af' + awaitInfo.id + '">' + result.toString() + "</div>"
              );
            } else {
              asyncOut.write(
                '<div id="af' + awaitInfo.id + '" style="display:none">' + result.toString() + "</div>"
              );
            }
            asyncOut.script(
              "$af(" + (typeof awaitInfo.id === "number" ? awaitInfo.id : '"' + awaitInfo.id + '"') + (awaitInfo.after ? ',"' + awaitInfo.after + '"' : "") + ")"
            );
            awaitInfo.out.writer = asyncOut.writer;
            out.emit("await:finish", awaitInfo);
            out.flush();
            if (--remaining === 0) {
              asyncOut.end();
              next();
            }
          }).on("error", function(err) {
            asyncOut.error(err);
          });
        }
        awaitContext.instances.forEach(handleAwait);
        out.on("await:clientReorder", function(awaitInfo) {
          remaining++;
          handleAwait(awaitInfo);
        });
        delete awaitContext.instances;
      });
    };
  }
});
export default require_reorderer_renderer();
//# sourceMappingURL=marko_src_core-tags_core_await_reorderer-renderer__js.js.map
