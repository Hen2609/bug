import {
  require_VElement,
  require_VNode,
  require_inherit
} from "./chunk-DNVSKMP5.js";
import {
  require_helpers,
  require_parse_html
} from "./chunk-BYPQ4JD2.js";
import {
  require_extend
} from "./chunk-7ZAMFXOE.js";
import {
  require_dom_data
} from "./chunk-GSFJVMIM.js";
import {
  __commonJS
} from "./chunk-TWLJ45QX.js";

// node_modules/marko/src/runtime/vdom/VDocumentFragment.js
var require_VDocumentFragment = __commonJS({
  "node_modules/marko/src/runtime/vdom/VDocumentFragment.js"(exports, module) {
    var VNode = require_VNode();
    var inherit = require_inherit();
    var extend = require_extend();
    function VDocumentFragmentClone(other) {
      extend(this, other);
      this.___parentNode = null;
      this.___nextSiblingInternal = null;
    }
    function VDocumentFragment(out) {
      this.___VNode(null);
      this.___out = out;
    }
    VDocumentFragment.prototype = {
      ___nodeType: 11,
      ___DocumentFragment: true,
      ___cloneNode: function() {
        return new VDocumentFragmentClone(this);
      },
      ___actualize: function(host) {
        return (host.ownerDocument || host).createDocumentFragment();
      }
    };
    inherit(VDocumentFragment, VNode);
    VDocumentFragmentClone.prototype = VDocumentFragment.prototype;
    module.exports = VDocumentFragment;
  }
});

// node_modules/marko/src/runtime/vdom/VText.js
var require_VText = __commonJS({
  "node_modules/marko/src/runtime/vdom/VText.js"(exports, module) {
    var VNode = require_VNode();
    var inherit = require_inherit();
    function VText(value, ownerComponent) {
      this.___VNode(-1, ownerComponent);
      this.___nodeValue = value;
    }
    VText.prototype = {
      ___Text: true,
      ___nodeType: 3,
      ___actualize: function(host) {
        return (host.ownerDocument || host).createTextNode(this.___nodeValue);
      },
      ___cloneNode: function() {
        return new VText(this.___nodeValue);
      }
    };
    inherit(VText, VNode);
    module.exports = VText;
  }
});

// node_modules/marko/src/runtime/vdom/VComponent.js
var require_VComponent = __commonJS({
  "node_modules/marko/src/runtime/vdom/VComponent.js"(exports, module) {
    var VNode = require_VNode();
    var inherit = require_inherit();
    function VComponent(component, key, ownerComponent, preserve) {
      this.___VNode(null, ownerComponent);
      this.___key = key;
      this.___component = component;
      this.___preserve = preserve;
    }
    VComponent.prototype = {
      ___nodeType: 2
    };
    inherit(VComponent, VNode);
    module.exports = VComponent;
  }
});

// node_modules/marko/src/runtime/vdom/morphdom/fragment.js
var require_fragment = __commonJS({
  "node_modules/marko/src/runtime/vdom/morphdom/fragment.js"(exports) {
    var helpers = require_helpers();
    var insertBefore = helpers.___insertBefore;
    var fragmentPrototype = {
      nodeType: 12,
      get firstChild() {
        var firstChild = this.startNode.nextSibling;
        return firstChild === this.endNode ? void 0 : firstChild;
      },
      get lastChild() {
        var lastChild = this.endNode.previousSibling;
        return lastChild === this.startNode ? void 0 : lastChild;
      },
      get parentNode() {
        var parentNode = this.startNode.parentNode;
        return parentNode === this.detachedContainer ? void 0 : parentNode;
      },
      get namespaceURI() {
        return this.startNode.parentNode.namespaceURI;
      },
      get nextSibling() {
        return this.endNode.nextSibling;
      },
      get nodes() {
        if ("MARKO_DEBUG") {
          if (this.___markersRemovedError) {
            throw this.___markersRemovedError("Cannot get fragment nodes.");
          }
        }
        var nodes = [];
        var current = this.startNode;
        while (current !== this.endNode) {
          nodes.push(current);
          current = current.nextSibling;
        }
        nodes.push(current);
        return nodes;
      },
      insertBefore: function(newChildNode, referenceNode) {
        var actualReference = referenceNode == null ? this.endNode : referenceNode;
        return insertBefore(
          newChildNode,
          actualReference,
          this.startNode.parentNode
        );
      },
      insertInto: function(newParentNode, referenceNode) {
        this.nodes.forEach(function(node) {
          insertBefore(node, referenceNode, newParentNode);
        }, this);
        return this;
      },
      remove: function() {
        this.nodes.forEach(function(node) {
          this.detachedContainer.appendChild(node);
        }, this);
      }
    };
    function createFragmentNode(startNode, nextNode, parentNode) {
      var fragment = Object.create(fragmentPrototype);
      var isRoot = startNode && startNode.ownerDocument === startNode.parentNode;
      fragment.startNode = isRoot ? document.createComment("") : document.createTextNode("");
      fragment.endNode = isRoot ? document.createComment("") : document.createTextNode("");
      fragment.startNode.fragment = fragment;
      fragment.endNode.fragment = fragment;
      var detachedContainer = fragment.detachedContainer = document.createDocumentFragment();
      parentNode = parentNode || startNode && startNode.parentNode || detachedContainer;
      insertBefore(fragment.startNode, startNode, parentNode);
      insertBefore(fragment.endNode, nextNode, parentNode);
      return fragment;
    }
    function beginFragmentNode(startNode, parentNode) {
      var fragment = createFragmentNode(startNode, null, parentNode);
      fragment.___finishFragment = function(nextNode) {
        fragment.___finishFragment = null;
        insertBefore(
          fragment.endNode,
          nextNode,
          parentNode || startNode.parentNode
        );
      };
      return fragment;
    }
    exports.___createFragmentNode = createFragmentNode;
    exports.___beginFragmentNode = beginFragmentNode;
  }
});

// node_modules/marko/src/runtime/vdom/VFragment.js
var require_VFragment = __commonJS({
  "node_modules/marko/src/runtime/vdom/VFragment.js"(exports, module) {
    var domData = require_dom_data();
    var keysByDOMNode = domData.___keyByDOMNode;
    var vElementByDOMNode = domData.___vElementByDOMNode;
    var VNode = require_VNode();
    var inherit = require_inherit();
    var createFragmentNode = require_fragment().___createFragmentNode;
    function VFragment(key, ownerComponent, preserve) {
      this.___VNode(null, ownerComponent);
      this.___key = key;
      this.___preserve = preserve;
    }
    VFragment.prototype = {
      ___nodeType: 12,
      ___actualize: function() {
        var fragment = createFragmentNode();
        keysByDOMNode.set(fragment, this.___key);
        vElementByDOMNode.set(fragment, this);
        return fragment;
      }
    };
    inherit(VFragment, VNode);
    module.exports = VFragment;
  }
});

// node_modules/marko/src/runtime/vdom/vdom.js
var require_vdom = __commonJS({
  "node_modules/marko/src/runtime/vdom/vdom.js"(exports) {
    var VNode = require_VNode();
    var VDocumentFragment = require_VDocumentFragment();
    var VElement = require_VElement();
    var VText = require_VText();
    var VComponent = require_VComponent();
    var VFragment = require_VFragment();
    var parseHTML = require_parse_html();
    var specialHtmlRegexp = /[&<]/;
    function virtualizeChildNodes(node, vdomParent, ownerComponent) {
      var curChild = node.firstChild;
      while (curChild) {
        vdomParent.___appendChild(virtualize(curChild, ownerComponent));
        curChild = curChild.nextSibling;
      }
    }
    function virtualize(node, ownerComponent) {
      switch (node.nodeType) {
        case 1:
          return VElement.___virtualize(node, virtualizeChildNodes, ownerComponent);
        case 3:
          return new VText(node.nodeValue, ownerComponent);
        case 11:
          var vdomDocFragment = new VDocumentFragment();
          virtualizeChildNodes(node, vdomDocFragment, ownerComponent);
          return vdomDocFragment;
      }
    }
    function virtualizeHTML(html, ownerComponent) {
      if (!specialHtmlRegexp.test(html)) {
        return new VText(html, ownerComponent);
      }
      var vdomFragment = new VDocumentFragment();
      var curChild = parseHTML(html);
      while (curChild) {
        vdomFragment.___appendChild(virtualize(curChild, ownerComponent));
        curChild = curChild.nextSibling;
      }
      return vdomFragment;
    }
    var Node_prototype = VNode.prototype;
    Node_prototype.t = function(value) {
      var type = typeof value;
      var vdomNode;
      if (type !== "string") {
        if (value == null) {
          value = "";
        } else if (type === "object") {
          if (value.toHTML) {
            vdomNode = virtualizeHTML(value.toHTML());
          }
        }
      }
      this.___appendChild(vdomNode || new VText(value.toString()));
      return this.___finishChild();
    };
    Node_prototype.___appendDocumentFragment = function() {
      return this.___appendChild(new VDocumentFragment());
    };
    exports.___VDocumentFragment = VDocumentFragment;
    exports.___VElement = VElement;
    exports.___VText = VText;
    exports.___VComponent = VComponent;
    exports.___VFragment = VFragment;
    exports.___virtualize = virtualize;
    exports.___virtualizeHTML = virtualizeHTML;
  }
});

export {
  require_fragment,
  require_vdom
};
//# sourceMappingURL=chunk-O2ZL6YJ2.js.map
