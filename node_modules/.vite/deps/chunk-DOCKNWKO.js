import {
  require_createOut
} from "./chunk-XFSNMVI3.js";
import {
  require_index_browser
} from "./chunk-FBABJUQR.js";
import {
  require_extend
} from "./chunk-7ZAMFXOE.js";
import {
  __commonJS
} from "./chunk-TWLJ45QX.js";

// node_modules/marko/src/runtime/renderable.js
var require_renderable = __commonJS({
  "node_modules/marko/src/runtime/renderable.js"(exports, module) {
    var defaultCreateOut = require_createOut();
    var setImmediate = require_index_browser().___setImmediate;
    var extend = require_extend();
    function safeRender(renderFunc, finalData, finalOut, shouldEnd) {
      try {
        renderFunc(finalData, finalOut);
        if (shouldEnd) {
          finalOut.end();
        }
      } catch (err) {
        var actualEnd = finalOut.end;
        finalOut.end = function() {
        };
        setImmediate(function() {
          finalOut.end = actualEnd;
          finalOut.error(err);
        });
      }
      return finalOut;
    }
    module.exports = function(target, renderer) {
      var renderFunc = renderer && (renderer.renderer || renderer.render || renderer);
      var createOut = target.createOut || renderer.createOut || defaultCreateOut;
      return extend(target, {
        createOut,
        renderToString: function(data, callback) {
          var localData = data || {};
          var render = renderFunc || this._;
          var globalData = localData.$global;
          var out = createOut(globalData);
          out.global.template = this;
          if (globalData) {
            localData.$global = void 0;
          }
          if (callback) {
            out.on("finish", function() {
              callback(null, out.toString(), out);
            }).once("error", callback);
            return safeRender(render, localData, out, true);
          } else {
            out.sync();
            render(localData, out);
            return out.toString();
          }
        },
        renderSync: function(data) {
          var localData = data || {};
          var render = renderFunc || this._;
          var globalData = localData.$global;
          var out = createOut(globalData);
          out.sync();
          out.global.template = this;
          if (globalData) {
            localData.$global = void 0;
          }
          render(localData, out);
          return out.___getResult();
        },
        render: function(data, out) {
          var callback;
          var finalOut;
          var finalData;
          var globalData;
          var render = renderFunc || this._;
          var shouldBuffer = this.___shouldBuffer;
          var shouldEnd = true;
          if (data) {
            finalData = data;
            if (globalData = data.$global) {
              finalData.$global = void 0;
            }
          } else {
            finalData = {};
          }
          if (out && out.___isOut) {
            finalOut = out;
            shouldEnd = false;
            extend(out.global, globalData);
          } else if (typeof out == "function") {
            finalOut = createOut(globalData);
            callback = out;
          } else {
            finalOut = createOut(
              globalData,
              out,
              void 0,
              shouldBuffer
            );
          }
          if (callback) {
            finalOut.on("finish", function() {
              callback(null, finalOut.___getResult());
            }).once("error", callback);
          }
          globalData = finalOut.global;
          globalData.template = globalData.template || this;
          return safeRender(render, finalData, finalOut, shouldEnd);
        }
      });
    };
  }
});

export {
  require_renderable
};
//# sourceMappingURL=chunk-DOCKNWKO.js.map
