{
  "version": 3,
  "sources": ["../../marko/src/runtime/html/helpers/_dynamic-attr.js"],
  "sourcesContent": ["\"use strict\";\nvar attrHelper = require(\"./attr\");\nvar notEmptyAttr = attrHelper.___notEmptyAttr;\nvar isEmptyAttrValue = attrHelper.___isEmptyAttrValue;\nvar classHelper = require(\"./class-attr\");\nvar styleHelper = require(\"./style-attr\");\n\nmodule.exports = function dynamicAttr(name, value) {\n  switch (name) {\n    case \"class\":\n      return classHelper(value);\n    case \"style\":\n      return styleHelper(value);\n    case \"renderBody\":\n      return \"\";\n    default:\n      return isEmptyAttrValue(value) || isInvalidAttrName(name)\n        ? \"\"\n        : notEmptyAttr(name, value);\n  }\n};\n\n// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n// Technically the above includes more invalid characters for attributes.\n// In practice however the only character that does not become an attribute name\n// is when there is a >.\nfunction isInvalidAttrName(name) {\n  for (let i = name.length; i--; ) {\n    if (name[i] === \">\") {\n      return true;\n    }\n  }\n\n  return false;\n}\n"],
  "mappings": ";;;;;;;;;;;;;;AAAA;AAAA;AAAA;AACA,QAAI,aAAa;AACjB,QAAI,eAAe,WAAW;AAC9B,QAAI,mBAAmB,WAAW;AAClC,QAAI,cAAc;AAClB,QAAI,cAAc;AAElB,WAAO,UAAU,SAAS,YAAY,MAAM,OAAO;AACjD,cAAQ,MAAM;AAAA,QACZ,KAAK;AACH,iBAAO,YAAY,KAAK;AAAA,QAC1B,KAAK;AACH,iBAAO,YAAY,KAAK;AAAA,QAC1B,KAAK;AACH,iBAAO;AAAA,QACT;AACE,iBAAO,iBAAiB,KAAK,KAAK,kBAAkB,IAAI,IACpD,KACA,aAAa,MAAM,KAAK;AAAA,MAChC;AAAA,IACF;AAMA,aAAS,kBAAkB,MAAM;AAC/B,eAAS,IAAI,KAAK,QAAQ,OAAO;AAC/B,YAAI,KAAK,OAAO,KAAK;AACnB,iBAAO;AAAA,QACT;AAAA,MACF;AAEA,aAAO;AAAA,IACT;AAAA;AAAA;",
  "names": []
}
