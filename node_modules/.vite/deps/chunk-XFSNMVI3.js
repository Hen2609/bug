import {
  require_helpers
} from "./chunk-BYPQ4JD2.js";
import {
  require_complain
} from "./chunk-BXPA54VP.js";
import {
  require_extend
} from "./chunk-7ZAMFXOE.js";
import {
  require_index_browser
} from "./chunk-GSFJVMIM.js";
import {
  __commonJS
} from "./chunk-TWLJ45QX.js";

// node_modules/marko/src/runtime/createOut.js
var require_createOut = __commonJS({
  "node_modules/marko/src/runtime/createOut.js"(exports, module) {
    var actualCreateOut;
    function setCreateOut(createOutFunc) {
      actualCreateOut = createOutFunc;
    }
    function createOut(globalData) {
      return actualCreateOut(globalData);
    }
    createOut.___setCreateOut = setCreateOut;
    module.exports = createOut;
  }
});

// node_modules/marko/src/runtime/dom-insert.js
var require_dom_insert = __commonJS({
  "node_modules/marko/src/runtime/dom-insert.js"(exports, module) {
    var extend = require_extend();
    var componentsUtil = require_index_browser();
    var destroyComponentForNode = componentsUtil.___destroyComponentForNode;
    var destroyNodeRecursive = componentsUtil.___destroyNodeRecursive;
    var helpers = require_helpers();
    var insertBefore = helpers.___insertBefore;
    var insertAfter = helpers.___insertAfter;
    var removeChild = helpers.___removeChild;
    function resolveEl(el) {
      if (typeof el == "string") {
        var elId = el;
        el = document.getElementById(elId);
        if (!el) {
          throw Error("Not found: " + elId);
        }
      }
      return el;
    }
    function beforeRemove(referenceEl) {
      destroyNodeRecursive(referenceEl);
      destroyComponentForNode(referenceEl);
    }
    module.exports = function(target, getEl, afterInsert) {
      extend(target, {
        appendTo: function(referenceEl) {
          referenceEl = resolveEl(referenceEl);
          var el = getEl(this, referenceEl);
          insertBefore(el, null, referenceEl);
          return afterInsert(this, referenceEl);
        },
        prependTo: function(referenceEl) {
          referenceEl = resolveEl(referenceEl);
          var el = getEl(this, referenceEl);
          insertBefore(el, referenceEl.firstChild || null, referenceEl);
          return afterInsert(this, referenceEl);
        },
        replace: function(referenceEl) {
          referenceEl = resolveEl(referenceEl);
          var el = getEl(this, referenceEl);
          beforeRemove(referenceEl);
          insertBefore(el, referenceEl, referenceEl.parentNode);
          removeChild(referenceEl);
          return afterInsert(this, referenceEl);
        },
        replaceChildrenOf: function(referenceEl) {
          referenceEl = resolveEl(referenceEl);
          var el = getEl(this, referenceEl);
          var curChild = referenceEl.firstChild;
          while (curChild) {
            var nextSibling = curChild.nextSibling;
            beforeRemove(curChild);
            curChild = nextSibling;
          }
          referenceEl.innerHTML = "";
          insertBefore(el, null, referenceEl);
          return afterInsert(this, referenceEl);
        },
        insertBefore: function(referenceEl) {
          referenceEl = resolveEl(referenceEl);
          var el = getEl(this, referenceEl);
          insertBefore(el, referenceEl, referenceEl.parentNode);
          return afterInsert(this, referenceEl);
        },
        insertAfter: function(referenceEl) {
          referenceEl = resolveEl(referenceEl);
          var el = getEl(this, referenceEl);
          insertAfter(el, referenceEl, referenceEl.parentNode);
          return afterInsert(this, referenceEl);
        }
      });
    };
  }
});

// node_modules/events-light/src/index.js
var require_src = __commonJS({
  "node_modules/events-light/src/index.js"(exports, module) {
    var slice = Array.prototype.slice;
    function isFunction(arg) {
      return typeof arg === "function";
    }
    function checkListener(listener) {
      if (!isFunction(listener)) {
        throw TypeError("Invalid listener");
      }
    }
    function invokeListener(ee, listener, args) {
      switch (args.length) {
        case 1:
          listener.call(ee);
          break;
        case 2:
          listener.call(ee, args[1]);
          break;
        case 3:
          listener.call(ee, args[1], args[2]);
          break;
        default:
          listener.apply(ee, slice.call(args, 1));
      }
    }
    function addListener(eventEmitter, type, listener, prepend) {
      checkListener(listener);
      var events = eventEmitter.$e || (eventEmitter.$e = {});
      var listeners = events[type];
      if (listeners) {
        if (isFunction(listeners)) {
          events[type] = prepend ? [listener, listeners] : [listeners, listener];
        } else {
          if (prepend) {
            listeners.unshift(listener);
          } else {
            listeners.push(listener);
          }
        }
      } else {
        events[type] = listener;
      }
      return eventEmitter;
    }
    function EventEmitter() {
      this.$e = this.$e || {};
    }
    EventEmitter.EventEmitter = EventEmitter;
    EventEmitter.prototype = {
      $e: null,
      emit: function(type) {
        var args = arguments;
        var events = this.$e;
        if (!events) {
          return;
        }
        var listeners = events && events[type];
        if (!listeners) {
          if (type === "error") {
            var error = args[1];
            if (!(error instanceof Error)) {
              var context = error;
              error = new Error("Error: " + context);
              error.context = context;
            }
            throw error;
          }
          return false;
        }
        if (isFunction(listeners)) {
          invokeListener(this, listeners, args);
        } else {
          listeners = slice.call(listeners);
          for (var i = 0, len = listeners.length; i < len; i++) {
            var listener = listeners[i];
            invokeListener(this, listener, args);
          }
        }
        return true;
      },
      on: function(type, listener) {
        return addListener(this, type, listener, false);
      },
      prependListener: function(type, listener) {
        return addListener(this, type, listener, true);
      },
      once: function(type, listener) {
        checkListener(listener);
        function g() {
          this.removeListener(type, g);
          if (listener) {
            listener.apply(this, arguments);
            listener = null;
          }
        }
        this.on(type, g);
        return this;
      },
      removeListener: function(type, listener) {
        checkListener(listener);
        var events = this.$e;
        var listeners;
        if (events && (listeners = events[type])) {
          if (isFunction(listeners)) {
            if (listeners === listener) {
              delete events[type];
            }
          } else {
            for (var i = listeners.length - 1; i >= 0; i--) {
              if (listeners[i] === listener) {
                listeners.splice(i, 1);
              }
            }
          }
        }
        return this;
      },
      removeAllListeners: function(type) {
        var events = this.$e;
        if (events) {
          delete events[type];
        }
      },
      listenerCount: function(type) {
        var events = this.$e;
        var listeners = events && events[type];
        return listeners ? isFunction(listeners) ? 1 : listeners.length : 0;
      }
    };
    module.exports = EventEmitter;
  }
});

// node_modules/marko/src/runtime/RenderResult.js
var require_RenderResult = __commonJS({
  "node_modules/marko/src/runtime/RenderResult.js"(exports, module) {
    var domInsert = require_dom_insert();
    var complain = require_complain();
    function getRootNode(el) {
      var cur = el;
      while (cur.parentNode)
        cur = cur.parentNode;
      return cur;
    }
    function getComponentDefs(result) {
      var componentDefs = result.___components;
      if (!componentDefs) {
        throw Error("No component");
      }
      return componentDefs;
    }
    function RenderResult(out) {
      this.out = this.___out = out;
      this.___components = void 0;
    }
    module.exports = RenderResult;
    var proto = RenderResult.prototype = {
      getComponent: function() {
        return this.getComponents()[0];
      },
      getComponents: function(selector) {
        if (this.___components === void 0) {
          throw Error("Not added to DOM");
        }
        var componentDefs = getComponentDefs(this);
        var components = [];
        componentDefs.forEach(function(componentDef) {
          var component = componentDef.___component;
          if (!selector || selector(component)) {
            components.push(component);
          }
        });
        return components;
      },
      afterInsert: function(host) {
        var out = this.___out;
        var componentsContext = out.___components;
        if (componentsContext) {
          this.___components = componentsContext.___initComponents(host);
        } else {
          this.___components = null;
        }
        return this;
      },
      getNode: function(host) {
        return this.___out.___getNode(host);
      },
      getOutput: function() {
        return this.___out.___getOutput();
      },
      toString: function() {
        return this.___out.toString();
      },
      document: typeof document === "object" && document
    };
    Object.defineProperty(proto, "html", {
      get: function() {
        if ("MARKO_DEBUG") {
          complain(
            'The "html" property is deprecated. Please use "toString" instead.'
          );
        }
        return this.toString();
      }
    });
    Object.defineProperty(proto, "context", {
      get: function() {
        if ("MARKO_DEBUG") {
          complain(
            'The "context" property is deprecated. Please use "out" instead.'
          );
        }
        return this.___out;
      }
    });
    domInsert(
      proto,
      function getEl(renderResult, referenceEl) {
        return renderResult.getNode(getRootNode(referenceEl));
      },
      function afterInsert(renderResult, referenceEl) {
        return renderResult.afterInsert(getRootNode(referenceEl));
      }
    );
  }
});

export {
  require_dom_insert,
  require_createOut,
  require_src,
  require_RenderResult
};
//# sourceMappingURL=chunk-XFSNMVI3.js.map
