import {
  init_taglib_id,
  taglibId
} from "./chunk-45C4GXDQ.mjs";
import {
  init_is_api,
  isApi
} from "./chunk-EGIQZ5A4.mjs";
import {
  __esm
} from "./chunk-XYON6ZHC.mjs";

// src/transform/wrapper-component.ts
import { types as t } from "@marko/compiler";
import { isNativeTag, getTagDef } from "@marko/babel-utils";
function closest(path) {
  let root = path;
  do {
    const { node } = root;
    if (!node) {
      return;
    }
    const { extra } = node;
    if (extra) {
      const meta = extra.___lifecycle;
      if (meta) {
        return meta;
      }
    }
    root = root.parentPath;
  } while (root);
}
function ensureLifecycle(tag, client = true) {
  const program = tag.hub.file.path;
  let root = tag;
  while ((root = root.parentPath) !== program && (root = root.parentPath).node && isNativeTag(root))
    ;
  if (root.node) {
    const roots = lifecycleRootsForProgram.get(program);
    let extra = root.node.extra;
    if (roots.has(root)) {
      if (client)
        extra.___lifecycle.client = true;
    } else {
      const meta = {
        client,
        component: root.scope.generateUidIdentifier("component"),
        state: root.scope.generateUidIdentifier("state"),
        stateIndex: 0,
        refIndex: 0,
        varIndex: 0
      };
      roots.add(root);
      if (extra) {
        extra.___lifecycle = meta;
      } else {
        extra = root.node.extra = { ___lifecycle: meta };
      }
    }
    return extra.___lifecycle;
  }
}
function buildRootLifecycle(program) {
  const meta = program.node.extra.___lifecycle;
  return [
    t.markoClass(t.classBody([
      t.classMethod("method", t.identifier("onCreate"), [], t.blockStatement([
        t.expressionStatement(t.assignmentExpression("=", t.memberExpression(t.thisExpression(), t.identifier("state")), t.objectExpression([])))
      ]))
    ])),
    t.markoScriptlet([
      t.variableDeclaration("var", [
        t.variableDeclarator(meta.component, t.identifier("component")),
        t.variableDeclarator(meta.state, t.identifier("state"))
      ])
    ])
  ];
}
function buildNestedLifecycle(tag) {
  var _a;
  const meta = tag.node.extra.___lifecycle;
  const body = [];
  const result = [];
  for (const child of tag.node.body.body) {
    if ((_a = child.extra) == null ? void 0 : _a._hoistInInstance) {
      result.push(child);
    } else {
      body.push(child);
    }
  }
  result.push(t.markoTag(t.stringLiteral(meta.client ? "_instance" : "_instance-stateless"), [], t.markoTagBody(body, [
    tag.scope.generateUidIdentifier("nestedComponentDef"),
    meta.component,
    meta.state
  ])));
  return result;
}
var lifecycleRootsForProgram, tagsNeedingLifecycle, wrapper_component_default;
var init_wrapper_component = __esm({
  "src/transform/wrapper-component.ts"() {
    init_taglib_id();
    init_is_api();
    lifecycleRootsForProgram = /* @__PURE__ */ new WeakMap();
    tagsNeedingLifecycle = /* @__PURE__ */ new Set([
      "id",
      "let",
      "get",
      "set",
      "effect",
      "return",
      "lifecycle"
    ]);
    wrapper_component_default = {
      Program: {
        enter(program) {
          if (isApi(program, "tags")) {
            lifecycleRootsForProgram.set(program, /* @__PURE__ */ new Set());
          }
        },
        exit(program) {
          if (isApi(program, "tags")) {
            for (const root of lifecycleRootsForProgram.get(program)) {
              if (root === program) {
                if (root.node.extra.___lifecycle.client) {
                  program.node.body = buildRootLifecycle(program).concat(program.node.body);
                }
              } else {
                root.node.body.body = buildNestedLifecycle(root);
              }
            }
          }
        }
      },
      MarkoTag(tag) {
        const tagDef = getTagDef(tag);
        if (tagDef && tagDef.taglibId === taglibId) {
          if (tagsNeedingLifecycle.has(tagDef.name)) {
            ensureLifecycle(tag, !(tagDef.name === "id" && tag.parent.type === "Program"));
          }
        } else if (tag.node.var) {
          ensureLifecycle(tag);
        }
      }
    };
  }
});

export {
  closest,
  wrapper_component_default,
  ensureLifecycle,
  init_wrapper_component
};
