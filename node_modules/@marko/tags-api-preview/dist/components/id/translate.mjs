import {
  assert_no_assignments_default,
  init_assert_no_assignments
} from "../../chunk-JILDANNE.mjs";
import {
  closest,
  init_wrapper_component
} from "../../chunk-TFXOVXSS.mjs";
import "../../chunk-45C4GXDQ.mjs";
import "../../chunk-EGIQZ5A4.mjs";
import {
  __commonJS
} from "../../chunk-XYON6ZHC.mjs";

// src/components/id/translate.ts
import { types as t } from "@marko/compiler";
var require_translate = __commonJS({
  "src/components/id/translate.ts"(exports, module) {
    init_wrapper_component();
    init_assert_no_assignments();
    module.exports = function translate(tag) {
      const tagVar = tag.node.var;
      const errorMessage = !tagVar ? "requires a tag variable" : !t.isIdentifier(tagVar) ? "does not a destructured tag variable" : tag.node.attributes.length ? "does not support attributes" : tag.node.arguments ? "does not support arguments" : tag.node.body.params.length ? "does not support tag body parameters" : tag.node.body.body.length ? "does not support body content" : void 0;
      if (errorMessage) {
        throw tag.get("name").buildCodeFrameError(`The <id> tag ${errorMessage}.`);
      }
      assert_no_assignments_default(tag.get("var"));
      const meta = closest(tag.parentPath);
      tag.replaceWith(t.variableDeclaration("const", [
        t.variableDeclarator(tagVar, t.callExpression(t.memberExpression(meta.component, t.identifier("elId")), [t.stringLiteral(`@${meta.refIndex++}`)]))
      ]));
    };
  }
});
export default require_translate();
