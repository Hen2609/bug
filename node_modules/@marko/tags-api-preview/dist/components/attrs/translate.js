var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
var import_compiler = require("@marko/compiler");
var import_transform = __toESM(require("../../util/deep-freeze/transform"));
var import_is_at_root = __toESM(require("../../util/is-at-root"));
const usedTag = /* @__PURE__ */ new WeakSet();
module.exports = (tag) => {
  var _a;
  const tagVar = tag.node.var;
  const errorMessage = usedTag.has(tag.hub) ? "can only be used once within a template" : !tagVar ? "requires a tag variable to be assigned to" : !(0, import_is_at_root.default)(tag) ? "can only used at the root of the template" : tag.node.attributes.length > 0 ? "does not support attributes" : tag.node.body.body.length ? "does not support body content" : tag.node.body.params.length ? "does not support tag body parameters" : ((_a = tag.node.arguments) == null ? void 0 : _a.length) ? "does not support arguments" : void 0;
  if (errorMessage) {
    throw tag.get("name").buildCodeFrameError(`The <attrs> tag ${errorMessage}.`);
  }
  usedTag.add(tag.hub);
  tag.replaceWith(import_compiler.types.variableDeclaration("const", [
    import_compiler.types.variableDeclarator(tagVar, (0, import_transform.default)(tag.hub.file, import_compiler.types.identifier("input")))
  ]));
};
