import {
  init_is_at_root,
  isAtRoot
} from "../../chunk-MZJE7NCD.mjs";
import "../../chunk-MU57322L.mjs";
import {
  init_transform,
  transform_default
} from "../../chunk-YQG3LUWZ.mjs";
import "../../chunk-BCNAFPHP.mjs";
import "../../chunk-45C4GXDQ.mjs";
import {
  __commonJS
} from "../../chunk-XYON6ZHC.mjs";

// src/components/attrs/translate.ts
import { types as t } from "@marko/compiler";
var require_translate = __commonJS({
  "src/components/attrs/translate.ts"(exports, module) {
    init_transform();
    init_is_at_root();
    var usedTag = /* @__PURE__ */ new WeakSet();
    module.exports = (tag) => {
      var _a;
      const tagVar = tag.node.var;
      const errorMessage = usedTag.has(tag.hub) ? "can only be used once within a template" : !tagVar ? "requires a tag variable to be assigned to" : !isAtRoot(tag) ? "can only used at the root of the template" : tag.node.attributes.length > 0 ? "does not support attributes" : tag.node.body.body.length ? "does not support body content" : tag.node.body.params.length ? "does not support tag body parameters" : ((_a = tag.node.arguments) == null ? void 0 : _a.length) ? "does not support arguments" : void 0;
      if (errorMessage) {
        throw tag.get("name").buildCodeFrameError(`The <attrs> tag ${errorMessage}.`);
      }
      usedTag.add(tag.hub);
      tag.replaceWith(t.variableDeclaration("const", [
        t.variableDeclarator(tagVar, transform_default(tag.hub.file, t.identifier("input")))
      ]));
    };
  }
});
export default require_translate();
