import {
  getAttr,
  init_get_attr
} from "../../chunk-TOAOXY47.mjs";
import {
  importRuntimeDefault,
  init_import_runtime
} from "../../chunk-BCNAFPHP.mjs";
import {
  __commonJS
} from "../../chunk-XYON6ZHC.mjs";

// src/components/effect/translate.ts
import { types as t } from "@marko/compiler";
var require_translate = __commonJS({
  "src/components/effect/translate.ts"(exports, module) {
    init_import_runtime();
    init_get_attr();
    module.exports = function translate(tag) {
      var _a;
      const { file } = tag.hub;
      const defaultAttr = getAttr(tag, "default");
      const errorMessage = tag.node.var ? "does not support a tag variable" : !defaultAttr ? "must be initialized with a value" : tag.node.attributes.length > 1 ? "only supports the 'default' attribute" : tag.node.body.body.length ? "does not support body content" : tag.node.body.params.length ? "does not support tag body parameters" : ((_a = tag.node.arguments) == null ? void 0 : _a.length) ? "does not support arguments" : void 0;
      if (errorMessage) {
        throw tag.get("name").buildCodeFrameError(`The <effect> tag ${errorMessage}.`);
      }
      if (file.markoOpts.output === "html") {
        tag.remove();
        return;
      }
      tag.replaceWith(t.expressionStatement(t.callExpression(importRuntimeDefault(file, "components/effect", "effect"), [
        file._componentInstanceIdentifier,
        getAttr(tag, "default").node.value
      ])));
    };
  }
});
export default require_translate();
