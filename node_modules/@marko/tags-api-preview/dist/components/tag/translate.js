var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
var import_compiler = require("@marko/compiler");
var import_assert_no_assignments = __toESM(require("../../util/assert-no-assignments"));
const IDENTIFIERS = /* @__PURE__ */ new WeakMap();
module.exports = {
  enter(tag) {
    const tagVar = tag.node.var;
    const body = tag.node.body;
    const errorMessage = tag.node.arguments ? "does not support arguments" : tag.node.attributes.length ? "does not support attributes" : !tagVar ? "requires a tag variable" : !import_compiler.types.isIdentifier(tagVar) ? "cannot have a destructured tag variable" : !body.body.length ? "requires body content" : void 0;
    if (errorMessage) {
      throw tag.get("name").buildCodeFrameError(`The <tag> tag ${errorMessage}.`);
    }
    (0, import_assert_no_assignments.default)(tag.get("var"));
    IDENTIFIERS.set(tag, tagVar);
    tag.node.var = null;
  },
  exit(tag) {
    tag.replaceWith(import_compiler.types.functionDeclaration(IDENTIFIERS.get(tag), [import_compiler.types.identifier("out"), ...tag.node.body.params], import_compiler.types.blockStatement(tag.node.body.body)));
  }
};
