import {
  __commonJS
} from "../../chunk-XYON6ZHC.mjs";

// src/components/set/translate.ts
import path from "path";
import { types as t } from "@marko/compiler";
import { importDefault } from "@marko/babel-utils";
var require_translate = __commonJS({
  "src/components/set/translate.ts"(exports, module) {
    module.exports = function translate(tag) {
      var _a;
      const file = tag.hub.file;
      let errorMessage;
      for (const attr of tag.get("attributes")) {
        if (attr.isMarkoAttribute()) {
          switch (attr.node.name) {
            case "default":
            case "defaultChange":
              continue;
          }
        }
        errorMessage = `does not support the "${attr.toString()}" attribute`;
        break;
      }
      errorMessage = errorMessage || (!tag.node.attributes.length ? "requires a default attribute" : tag.node.var ? "does not support a tag variable" : ((_a = tag.node.arguments) == null ? void 0 : _a.length) ? "does not support arguments" : tag.node.body.params.length ? "does not support tag body parameters" : !tag.node.body.body.length ? "requires body content" : void 0);
      if (errorMessage) {
        throw tag.get("name").buildCodeFrameError(`The <set> tag ${errorMessage}.`);
      }
      tag.pushContainer("attributes", t.markoAttribute("___from", importDefault(file, `./${path.basename(file.opts.sourceFileName)}`, "context")));
    };
  }
});
export default require_translate();
