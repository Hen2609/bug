var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
var import_path = __toESM(require("path"));
var import_compiler = require("@marko/compiler");
var import_babel_utils = require("@marko/babel-utils");
module.exports = function translate(tag) {
  var _a;
  const file = tag.hub.file;
  let errorMessage;
  for (const attr of tag.get("attributes")) {
    if (attr.isMarkoAttribute()) {
      switch (attr.node.name) {
        case "default":
        case "defaultChange":
          continue;
      }
    }
    errorMessage = `does not support the "${attr.toString()}" attribute`;
    break;
  }
  errorMessage = errorMessage || (!tag.node.attributes.length ? "requires a default attribute" : tag.node.var ? "does not support a tag variable" : ((_a = tag.node.arguments) == null ? void 0 : _a.length) ? "does not support arguments" : tag.node.body.params.length ? "does not support tag body parameters" : !tag.node.body.body.length ? "requires body content" : void 0);
  if (errorMessage) {
    throw tag.get("name").buildCodeFrameError(`The <set> tag ${errorMessage}.`);
  }
  tag.pushContainer("attributes", import_compiler.types.markoAttribute("___from", (0, import_babel_utils.importDefault)(file, `./${import_path.default.basename(file.opts.sourceFileName)}`, "context")));
};
