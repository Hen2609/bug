import {
  require_patch_lifecycle
} from "../../chunk-5WRUZCBU.mjs";
import {
  __commonJS,
  __toESM
} from "../../chunk-XYON6ZHC.mjs";

// src/components/lifecycle/index.ts
var require_lifecycle = __commonJS({
  "src/components/lifecycle/index.ts"(exports, module) {
    var import_patch_lifecycle = __toESM(require_patch_lifecycle());
    var metaKey = Symbol();
    var indexKey = Symbol();
    var lifecycleMethods = {
      onMount: runMount,
      onUpdate: runUpdate,
      onDestroy: runDestroy
    };
    function runMount() {
      const meta = this[metaKey];
      if (meta) {
        this[indexKey] = 0;
        for (let i = 1; i < meta.length; i += 2) {
          const handlers = meta[i];
          if (handlers.onMount) {
            handlers.onMount();
          }
        }
      }
    }
    function runUpdate() {
      const meta = this[metaKey];
      if (meta) {
        this[indexKey] = 0;
        for (let i = 0; i < meta.length; i += 2) {
          if (meta[i]) {
            meta[i] = 0;
            const handlers = meta[i + 1];
            if (handlers.onUpdate) {
              handlers.onUpdate();
            }
          }
        }
      }
    }
    function runDestroy() {
      const meta = this[metaKey];
      if (meta) {
        for (let i = 1; i < meta.length; i += 2) {
          const handlers = meta[i];
          if (handlers.onDestroy) {
            handlers.onDestroy();
          }
        }
      }
    }
    module.exports = function(component, cur = {}) {
      const meta = component[metaKey];
      const index = component[indexKey];
      if (meta) {
        if (index === void 0) {
          meta.push(0, cur);
        } else {
          component[indexKey] += 2;
          const prev = meta[index + 1];
          prev.onMount = cur.onMount;
          prev.onDestroy = cur.onDestroy;
          if (prev.onUpdate !== cur.onUpdate) {
            meta[index] = 1;
            prev.onUpdate = cur.onUpdate;
          }
        }
      } else {
        (0, import_patch_lifecycle.default)(component, lifecycleMethods);
        component[metaKey] = [0, cur];
      }
    };
  }
});
export default require_lifecycle();
