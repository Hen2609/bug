var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
var import_compiler = require("@marko/compiler");
var import_get_attr = __toESM(require("../../util/get-attr"));
var import_is_api = __toESM(require("../../util/is-api"));
const visited = /* @__PURE__ */ new WeakSet();
module.exports = function transform(tag) {
  var _a, _b;
  if ((0, import_is_api.default)(tag, "class") || visited.has(tag)) {
    return;
  }
  visited.add(tag);
  const byAttr = (0, import_get_attr.default)(tag, "by");
  if (!byAttr) {
    return;
  }
  let byId;
  const body = tag.get("body");
  const { scope } = body;
  const idId = scope.generateUidIdentifier("id");
  const params = body.get("params");
  if (byAttr.get("value").isIdentifier()) {
    byId = byAttr.node.value;
  } else {
    byId = tag.parentPath.scope.generateUidIdentifier("by");
    tag.insertBefore(import_compiler.types.markoScriptlet([
      import_compiler.types.variableDeclaration("const", [
        import_compiler.types.variableDeclarator(byId, byAttr.node.value)
      ])
    ]));
  }
  const byArgs = [];
  const bodyVars = [];
  for (const param of params) {
    if (param.isIdentifier()) {
      byArgs.push(param.node);
    } else {
      const paramAlias = param.scope.generateUidIdentifier();
      bodyVars.push(import_compiler.types.variableDeclarator(param.node, paramAlias));
      byArgs.push(paramAlias);
    }
    param.remove();
  }
  if ((0, import_get_attr.default)(tag, "in")) {
    if (params.length < 1) {
      byArgs.push(scope.generateUidIdentifier("key"));
    }
    if (params.length < 2) {
      byArgs.push(scope.generateUidIdentifier("val"));
    }
  } else if ((0, import_get_attr.default)(tag, "of")) {
    if (params.length < 1) {
      byArgs.push(scope.generateUidIdentifier("val"));
    }
    if (params.length < 2) {
      byArgs.push(scope.generateUidIdentifier("key"));
    }
  } else {
    if (params.length < 1) {
      byArgs.push(scope.generateUidIdentifier("index"));
    }
  }
  body.set("params", byArgs);
  bodyVars.push(import_compiler.types.variableDeclarator(idId, import_compiler.types.callExpression(byId, byArgs)));
  const prependScriptlet = import_compiler.types.markoScriptlet([
    import_compiler.types.variableDeclaration("const", bodyVars)
  ]);
  prependScriptlet.extra = { _hoistInInstance: true };
  tag.get("body").unshiftContainer("body", prependScriptlet);
  tag.set("keyScope", idId);
  (_b = (_a = tag.node).extra) != null ? _b : _a.extra = {};
  tag.node.extra.keyScope = idId;
  byAttr.remove();
};
