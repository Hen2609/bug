import {
  getAttr,
  init_get_attr
} from "../../chunk-TOAOXY47.mjs";
import {
  init_is_api,
  isApi
} from "../../chunk-EGIQZ5A4.mjs";
import {
  __commonJS
} from "../../chunk-XYON6ZHC.mjs";

// src/components/for/transform.ts
import { types as t } from "@marko/compiler";
var require_transform = __commonJS({
  "src/components/for/transform.ts"(exports, module) {
    init_get_attr();
    init_is_api();
    var visited = /* @__PURE__ */ new WeakSet();
    module.exports = function transform(tag) {
      var _a, _b;
      if (isApi(tag, "class") || visited.has(tag)) {
        return;
      }
      visited.add(tag);
      const byAttr = getAttr(tag, "by");
      if (!byAttr) {
        return;
      }
      let byId;
      const body = tag.get("body");
      const { scope } = body;
      const idId = scope.generateUidIdentifier("id");
      const params = body.get("params");
      if (byAttr.get("value").isIdentifier()) {
        byId = byAttr.node.value;
      } else {
        byId = tag.parentPath.scope.generateUidIdentifier("by");
        tag.insertBefore(t.markoScriptlet([
          t.variableDeclaration("const", [
            t.variableDeclarator(byId, byAttr.node.value)
          ])
        ]));
      }
      const byArgs = [];
      const bodyVars = [];
      for (const param of params) {
        if (param.isIdentifier()) {
          byArgs.push(param.node);
        } else {
          const paramAlias = param.scope.generateUidIdentifier();
          bodyVars.push(t.variableDeclarator(param.node, paramAlias));
          byArgs.push(paramAlias);
        }
        param.remove();
      }
      if (getAttr(tag, "in")) {
        if (params.length < 1) {
          byArgs.push(scope.generateUidIdentifier("key"));
        }
        if (params.length < 2) {
          byArgs.push(scope.generateUidIdentifier("val"));
        }
      } else if (getAttr(tag, "of")) {
        if (params.length < 1) {
          byArgs.push(scope.generateUidIdentifier("val"));
        }
        if (params.length < 2) {
          byArgs.push(scope.generateUidIdentifier("key"));
        }
      } else {
        if (params.length < 1) {
          byArgs.push(scope.generateUidIdentifier("index"));
        }
      }
      body.set("params", byArgs);
      bodyVars.push(t.variableDeclarator(idId, t.callExpression(byId, byArgs)));
      const prependScriptlet = t.markoScriptlet([
        t.variableDeclaration("const", bodyVars)
      ]);
      prependScriptlet.extra = { _hoistInInstance: true };
      tag.get("body").unshiftContainer("body", prependScriptlet);
      tag.set("keyScope", idId);
      (_b = (_a = tag.node).extra) != null ? _b : _a.extra = {};
      tag.node.extra.keyScope = idId;
      byAttr.remove();
    };
  }
});
export default require_transform();
