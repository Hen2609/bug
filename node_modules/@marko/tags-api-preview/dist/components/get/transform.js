var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
var import_path = __toESM(require("path"));
var import_compiler = require("@marko/compiler");
var import_babel_utils = require("@marko/babel-utils");
var import_get_attr = __toESM(require("../../util/get-attr"));
module.exports = function transform(tag) {
  const file = tag.hub.file;
  const defaultAttr = (0, import_get_attr.default)(tag, "default");
  const errorMessage = defaultAttr && tag.node.attributes.length > 1 ? "only supports the 'default' attribute" : !tag.node.var ? "requires a tag variable" : tag.node.arguments ? "does not support arguments" : tag.node.body.params.length ? "does not support tag body parameters" : tag.node.body.body.length ? "does not support body content" : void 0;
  if (errorMessage) {
    throw tag.get("name").buildCodeFrameError(`The <get> tag ${errorMessage}.`);
  }
  if (!defaultAttr) {
    for (const name in tag.get("var").getBindingIdentifiers()) {
      for (const violation of tag.scope.getOwnBinding(name).constantViolations) {
        throw violation.buildCodeFrameError("Cannot mutate the global context.");
      }
    }
    tag.replaceWith(import_compiler.types.markoScriptlet([
      import_compiler.types.variableDeclaration("const", [
        import_compiler.types.variableDeclarator(tag.node.var, import_compiler.types.memberExpression(import_compiler.types.identifier("out"), import_compiler.types.identifier("global")))
      ])
    ]));
    return;
  }
  let fromValue = defaultAttr.node.value;
  if (import_compiler.types.isStringLiteral(fromValue)) {
    const literalValue = fromValue.value;
    if (literalValue === ".") {
      fromValue = (0, import_babel_utils.importDefault)(file, `./${import_path.default.basename(file.opts.sourceFileName)}`, "context");
    } else if (literalValue.includes("/")) {
      fromValue = (0, import_babel_utils.importDefault)(file, literalValue, "context");
    } else {
      const fromTag = (0, import_babel_utils.getTagDefForTagName)(file, literalValue);
      if (fromTag) {
        fromValue = (0, import_babel_utils.importDefault)(file, `<${literalValue}>`, "context");
      } else {
        throw defaultAttr.buildCodeFrameError(`<get> could not find provider matching "${literalValue}".`);
      }
    }
    defaultAttr.set("value", fromValue);
  }
};
