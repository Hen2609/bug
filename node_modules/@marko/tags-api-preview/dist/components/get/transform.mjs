import {
  getAttr,
  init_get_attr
} from "../../chunk-TOAOXY47.mjs";
import {
  __commonJS
} from "../../chunk-XYON6ZHC.mjs";

// src/components/get/transform.ts
import path from "path";
import { types as t } from "@marko/compiler";
import { getTagDefForTagName, importDefault } from "@marko/babel-utils";
var require_transform = __commonJS({
  "src/components/get/transform.ts"(exports, module) {
    init_get_attr();
    module.exports = function transform(tag) {
      const file = tag.hub.file;
      const defaultAttr = getAttr(tag, "default");
      const errorMessage = defaultAttr && tag.node.attributes.length > 1 ? "only supports the 'default' attribute" : !tag.node.var ? "requires a tag variable" : tag.node.arguments ? "does not support arguments" : tag.node.body.params.length ? "does not support tag body parameters" : tag.node.body.body.length ? "does not support body content" : void 0;
      if (errorMessage) {
        throw tag.get("name").buildCodeFrameError(`The <get> tag ${errorMessage}.`);
      }
      if (!defaultAttr) {
        for (const name in tag.get("var").getBindingIdentifiers()) {
          for (const violation of tag.scope.getOwnBinding(name).constantViolations) {
            throw violation.buildCodeFrameError("Cannot mutate the global context.");
          }
        }
        tag.replaceWith(t.markoScriptlet([
          t.variableDeclaration("const", [
            t.variableDeclarator(tag.node.var, t.memberExpression(t.identifier("out"), t.identifier("global")))
          ])
        ]));
        return;
      }
      let fromValue = defaultAttr.node.value;
      if (t.isStringLiteral(fromValue)) {
        const literalValue = fromValue.value;
        if (literalValue === ".") {
          fromValue = importDefault(file, `./${path.basename(file.opts.sourceFileName)}`, "context");
        } else if (literalValue.includes("/")) {
          fromValue = importDefault(file, literalValue, "context");
        } else {
          const fromTag = getTagDefForTagName(file, literalValue);
          if (fromTag) {
            fromValue = importDefault(file, `<${literalValue}>`, "context");
          } else {
            throw defaultAttr.buildCodeFrameError(`<get> could not find provider matching "${literalValue}".`);
          }
        }
        defaultAttr.set("value", fromValue);
      }
    };
  }
});
export default require_transform();
