var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
var import_patch_lifecycle = __toESM(require("../../util/patch-lifecycle"));
const metaKey = Symbol();
const indexKey = Symbol();
const lifecycleMethods = {
  onMount: resetIndex,
  onUpdate: resetIndex
};
function resetIndex() {
  this[indexKey] = 0;
}
function createReturn(component) {
  let curValue;
  return function(newVal, write) {
    if (write) {
      if (curValue && (curValue.default !== newVal.default || curValue.defaultChange !== newVal.defaultChange)) {
        component.forceUpdate();
      }
      return curValue = newVal;
    }
    return curValue;
  };
}
module.exports = function getReturn(component) {
  const meta = component[metaKey];
  const index = component[indexKey];
  let val;
  if (meta) {
    if (index === void 0) {
      meta.push(val = createReturn(component));
    } else {
      val = meta[component[indexKey]++];
    }
  } else {
    (0, import_patch_lifecycle.default)(component, lifecycleMethods);
    component[metaKey] = [val = createReturn(component)];
  }
  return val;
};
