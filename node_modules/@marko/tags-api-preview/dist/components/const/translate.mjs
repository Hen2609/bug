import {
  assert_no_assignments_default,
  init_assert_no_assignments
} from "../../chunk-JILDANNE.mjs";
import {
  getAttr,
  init_get_attr
} from "../../chunk-TOAOXY47.mjs";
import {
  init_transform,
  transform_default
} from "../../chunk-YQG3LUWZ.mjs";
import "../../chunk-BCNAFPHP.mjs";
import {
  __commonJS
} from "../../chunk-XYON6ZHC.mjs";

// src/components/const/translate.ts
import { types as t } from "@marko/compiler";
var require_translate = __commonJS({
  "src/components/const/translate.ts"(exports, module) {
    init_get_attr();
    init_transform();
    init_assert_no_assignments();
    module.exports = (tag) => {
      var _a;
      const tagVar = tag.node.var;
      const defaultAttr = getAttr(tag, "default");
      const errorMessage = !tagVar ? "requires a tag variable to be assigned to" : !defaultAttr ? "must be initialized with a value" : tag.node.attributes.length > 1 ? "only supports the 'default' attribute" : tag.node.body.body.length ? "does not support body content" : tag.node.body.params.length ? "does not support tag body parameters" : ((_a = tag.node.arguments) == null ? void 0 : _a.length) ? "does not support arguments" : void 0;
      if (errorMessage) {
        throw tag.get("name").buildCodeFrameError(`The <const> tag ${errorMessage}.`);
      }
      assert_no_assignments_default(tag.get("var"));
      tag.replaceWith(t.variableDeclaration("const", [
        t.variableDeclarator(tagVar, transform_default(tag.hub.file, defaultAttr.node.value))
      ]));
    };
  }
});
export default require_translate();
