import {
  getAttr,
  init_get_attr
} from "./chunk-TOAOXY47.mjs";
import {
  init_is_core_tag,
  isCoreTag
} from "./chunk-MU57322L.mjs";
import {
  importRuntimeNamed,
  init_import_runtime
} from "./chunk-BCNAFPHP.mjs";
import {
  ensureLifecycle,
  init_wrapper_component
} from "./chunk-TFXOVXSS.mjs";
import {
  init_is_api,
  isApi
} from "./chunk-EGIQZ5A4.mjs";
import {
  __esm
} from "./chunk-XYON6ZHC.mjs";

// src/transform/cached-function/transform.ts
import { isNativeTag, isDynamicTag } from "@marko/babel-utils";
import { types as t } from "@marko/compiler";
function toIdentifier(val) {
  return t.identifier(val);
}
var depsVisitor, transform_default;
var init_transform = __esm({
  "src/transform/cached-function/transform.ts"() {
    init_import_runtime();
    init_is_core_tag();
    init_get_attr();
    init_is_api();
    init_wrapper_component();
    depsVisitor = {
      Function(fn, state) {
        if (fn === state.root)
          fn.skip();
      },
      ReferencedIdentifier: (identifier, state) => {
        const { name } = identifier.node;
        const binding = identifier.scope.getBinding(name);
        if (binding) {
          const bindingTag = binding.path;
          if (bindingTag.isMarkoTag() && !(isNativeTag(bindingTag) || isDynamicTag(bindingTag))) {
            let isDep = false;
            if (isCoreTag("const", binding.path)) {
              const nestedState = state.shallow ? state : { root: state.root, shallow: true };
              getAttr(bindingTag, "default").traverse(depsVisitor, nestedState);
              isDep = !!nestedState.deps;
            } else {
              isDep = true;
            }
            if (isDep) {
              if (state.shallow) {
                state.deps = true;
                identifier.stop();
              } else {
                (state.deps || (state.deps = /* @__PURE__ */ new Set())).add(identifier.node.name);
              }
            }
          }
        }
      }
    };
    transform_default = {
      Function(fn) {
        if (isApi(fn, "class"))
          return;
        const parentTag = fn.findParent((parent) => parent.isMarkoTag());
        if (!fn.isExpression() || !parentTag || isNativeTag(parentTag)) {
          return;
        }
        const state = { root: fn };
        fn.skip();
        fn.traverse(depsVisitor, state);
        if (state.deps) {
          const { file } = fn.hub;
          const { component } = ensureLifecycle(parentTag);
          fn.replaceWith(t.callExpression(importRuntimeNamed(file, "transform/cached-function", "cache"), [
            t.logicalExpression("||", t.callExpression(importRuntimeNamed(file, "transform/cached-function", "cached"), [
              component,
              t.arrayExpression(Array.from(state.deps, toIdentifier))
            ]), fn.node)
          ]));
        }
      }
    };
  }
});

export {
  transform_default,
  init_transform
};
