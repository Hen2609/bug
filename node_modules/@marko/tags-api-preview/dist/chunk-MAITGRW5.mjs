import {
  getAttr,
  init_get_attr
} from "./chunk-TOAOXY47.mjs";
import {
  importRuntimeDefault,
  init_import_runtime
} from "./chunk-BCNAFPHP.mjs";
import {
  init_is_api,
  isApi
} from "./chunk-EGIQZ5A4.mjs";
import {
  __esm
} from "./chunk-XYON6ZHC.mjs";

// src/translate/native-tag-handlers/translate.ts
import { types as t } from "@marko/compiler";
import { isNativeTag } from "@marko/babel-utils";
var eventNameReg, changeNameReg, bindsByTag, translate_default;
var init_translate = __esm({
  "src/translate/native-tag-handlers/translate.ts"() {
    init_import_runtime();
    init_is_api();
    init_get_attr();
    eventNameReg = /^on[A-Z]/;
    changeNameReg = /Change$/;
    bindsByTag = {
      input: ["value", "checked"],
      textarea: ["value"]
    };
    translate_default = {
      MarkoTag(tag) {
        if (isApi(tag, "tags") && isNativeTag(tag)) {
          const file = tag.hub.file;
          const isHTML = file.markoOpts.output === "html";
          const extra = tag.node.extra || (tag.node.extra = {});
          const meta = extra.properties || (extra.properties = []);
          const attrs = tag.get("attributes");
          if (attrs.some((it) => it.isMarkoSpreadAttribute())) {
            const metaId = tag.scope.generateUidIdentifier("meta");
            const properties = [];
            tag.insertBefore(t.variableDeclaration("var", [
              t.variableDeclarator(metaId, t.objectExpression([]))
            ]));
            meta.push(t.spreadElement(metaId));
            for (const attr of attrs) {
              if (attr.isMarkoAttribute()) {
                if (attr.node.name === "key")
                  continue;
                properties.push(t.objectProperty(t.stringLiteral(attr.node.name), attr.node.value));
              } else {
                properties.push(t.spreadElement(attr.node.value));
              }
              attr.remove();
            }
            tag.pushContainer("attributes", t.markoSpreadAttribute(t.callExpression(importRuntimeDefault(file, "translate/native-tag-handlers", "extractHandlers"), isHTML ? [t.objectExpression(properties)] : [
              t.objectExpression(properties),
              file._componentDefIdentifier,
              tag.node.name,
              metaId
            ])));
          } else {
            const tagName = tag.node.name.value;
            const binds = bindsByTag[tagName];
            for (const attr of attrs) {
              const { node } = attr;
              const { name, value } = node;
              if (isHTML) {
                if (eventNameReg.test(name) || changeNameReg.test(name)) {
                  attr.remove();
                }
              } else if (eventNameReg.test(name) && value) {
                node.arguments = [value];
                node.value = t.booleanLiteral(true);
              }
            }
            if (binds) {
              const preserve = [];
              for (const name of binds) {
                const changeName = `${name}Change`;
                const valueAttr = getAttr(tag, name);
                const changeAttr = getAttr(tag, changeName);
                const nameLiteral = t.stringLiteral(name);
                if (changeAttr) {
                  const eId = t.identifier("e");
                  const targetId = t.identifier("target");
                  const changeId = tag.scope.generateUidIdentifier(changeName);
                  const changeValue = changeAttr.node.value;
                  tag.insertBefore(t.variableDeclaration("var", [
                    t.variableDeclarator(changeId, changeValue)
                  ]));
                  tag.pushContainer("attributes", t.markoAttribute("onInput", t.booleanLiteral(true), null, [
                    t.arrowFunctionExpression([eId], t.blockStatement([
                      t.expressionStatement(t.callExpression(changeId, [
                        t.memberExpression(t.memberExpression(eId, targetId), t.identifier(name))
                      ]))
                    ]))
                  ]));
                  changeAttr.remove();
                  if (!isHTML && valueAttr && !t.isFunction(changeValue)) {
                    preserve.push(t.logicalExpression("&&", changeId, nameLiteral));
                  }
                } else if (!isHTML && valueAttr) {
                  preserve.push(nameLiteral);
                }
              }
              if (preserve.length) {
                meta.push(t.objectProperty(t.identifier("pa"), t.arrayExpression(preserve)));
              }
            }
          }
        }
      }
    };
  }
});

export {
  translate_default,
  init_translate
};
