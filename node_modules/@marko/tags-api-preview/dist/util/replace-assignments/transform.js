var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var transform_exports = {};
__export(transform_exports, {
  default: () => replaceAssignments
});
module.exports = __toCommonJS(transform_exports);
var import_compiler = require("@marko/compiler");
var import_import_runtime = require("../../util/import-runtime");
var import_transform = __toESM(require("../deep-freeze/transform"));
function replaceAssignments(binding, fnExpression) {
  var _a;
  const file = binding.path.hub.file;
  for (const assignment of binding.constantViolations) {
    let value;
    if (assignment.isUpdateExpression()) {
      value = import_compiler.types.binaryExpression(assignment.node.operator === "++" ? "+" : "-", binding.identifier, import_compiler.types.numericLiteral(1));
    } else if (assignment.isAssignmentExpression()) {
      value = assignment.node.operator === "=" ? (0, import_transform.default)(file, assignment.node.right) : import_compiler.types.binaryExpression(assignment.node.operator.slice(0, -1), binding.identifier, assignment.node.right);
    }
    if (value) {
      const parent = assignment.parentPath;
      if (parent.isFunction() && parent.parentPath.isMarkoAttribute() && ((_a = parent.parentPath.node.extra) == null ? void 0 : _a.___wasBound)) {
        parent.replaceWith(fnExpression);
      } else {
        assignment.replaceWith(import_compiler.types.callExpression((0, import_import_runtime.importRuntimeDefault)(file, "util/replace-assignments", "assign"), [fnExpression, value]));
      }
    }
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {});
