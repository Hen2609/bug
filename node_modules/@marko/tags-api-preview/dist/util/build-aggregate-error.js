var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var build_aggregate_error_exports = {};
__export(build_aggregate_error_exports, {
  buildAggregateError: () => buildAggregateError
});
module.exports = __toCommonJS(build_aggregate_error_exports);
var import_path = __toESM(require("path"));
var import_code_frame = require("@babel/code-frame");
const CWD = process.cwd();
function buildAggregateError(file, rootMsg, ...paths) {
  const err = new SyntaxError();
  const fileName = import_path.default.relative(CWD, file.opts.filename);
  const finalMsg = `${rootMsg}:

${paths.map(([msg, path2]) => `\x1B[90m${msg} at ${getFileNameWithLoc(fileName, path2)}:\x1B[0m
${getFrame(file, path2)}`).join("\n\n")}`;
  if (!("MARKO_DEBUG" in process.env)) {
    err.stack = finalMsg;
  }
  Object.defineProperty(err, "message", {
    get() {
      return finalMsg;
    },
    set() {
    }
  });
  return err;
}
function getFrame(file, { node: { loc } }) {
  return loc ? (0, import_code_frame.codeFrameColumns)(file.code, {
    start: {
      line: loc.start.line,
      column: loc.start.column + 1
    },
    end: loc.end && loc.start.line === loc.end.line ? {
      line: loc.end.line,
      column: loc.end.column + 1
    } : void 0
  }, { highlightCode: true }) : "";
}
function getFileNameWithLoc(fileName, { node: { loc } }) {
  if (loc) {
    return `${fileName}(${loc.start.line},${loc.start.column + 1})`;
  }
  return fileName;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  buildAggregateError
});
