import {
  __esm
} from "./chunk-XYON6ZHC.mjs";

// src/util/build-aggregate-error.ts
import path from "path";
import { codeFrameColumns } from "@babel/code-frame";
function buildAggregateError(file, rootMsg, ...paths) {
  const err = new SyntaxError();
  const fileName = path.relative(CWD, file.opts.filename);
  const finalMsg = `${rootMsg}:

${paths.map(([msg, path2]) => `\x1B[90m${msg} at ${getFileNameWithLoc(fileName, path2)}:\x1B[0m
${getFrame(file, path2)}`).join("\n\n")}`;
  if (!("MARKO_DEBUG" in process.env)) {
    err.stack = finalMsg;
  }
  Object.defineProperty(err, "message", {
    get() {
      return finalMsg;
    },
    set() {
    }
  });
  return err;
}
function getFrame(file, { node: { loc } }) {
  return loc ? codeFrameColumns(file.code, {
    start: {
      line: loc.start.line,
      column: loc.start.column + 1
    },
    end: loc.end && loc.start.line === loc.end.line ? {
      line: loc.end.line,
      column: loc.end.column + 1
    } : void 0
  }, { highlightCode: true }) : "";
}
function getFileNameWithLoc(fileName, { node: { loc } }) {
  if (loc) {
    return `${fileName}(${loc.start.line},${loc.start.column + 1})`;
  }
  return fileName;
}
var CWD;
var init_build_aggregate_error = __esm({
  "src/util/build-aggregate-error.ts"() {
    CWD = process.cwd();
  }
});

export {
  buildAggregateError,
  init_build_aggregate_error
};
