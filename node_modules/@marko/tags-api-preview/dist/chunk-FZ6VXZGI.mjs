import {
  __esm
} from "./chunk-XYON6ZHC.mjs";

// src/transform/attribute-bindings.ts
import { types as t } from "@marko/compiler";
var AttributeVisitor, attribute_bindings_default;
var init_attribute_bindings = __esm({
  "src/transform/attribute-bindings.ts"() {
    AttributeVisitor = {
      MarkoAttribute(attr) {
        if (!attr.node.bound) {
          return;
        }
        const value = attr.get("value");
        if (!value.isIdentifier()) {
          throw value.buildCodeFrameError("Can only bind to variable names.");
        }
        const tempId = t.identifier("_");
        const changeAttr = t.markoAttribute(`${attr.node.name}Change`, t.arrowFunctionExpression([tempId], t.assignmentExpression("=", value.node, tempId)));
        attr.node.bound = false;
        changeAttr.extra = { ___wasBound: true };
        attr.insertAfter(changeAttr);
      }
    };
    attribute_bindings_default = {
      Program(program) {
        program.traverse(AttributeVisitor);
      }
    };
  }
});

export {
  attribute_bindings_default,
  init_attribute_bindings
};
