var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var attribute_bindings_exports = {};
__export(attribute_bindings_exports, {
  default: () => attribute_bindings_default
});
module.exports = __toCommonJS(attribute_bindings_exports);
var import_compiler = require("@marko/compiler");
const AttributeVisitor = {
  MarkoAttribute(attr) {
    if (!attr.node.bound) {
      return;
    }
    const value = attr.get("value");
    if (!value.isIdentifier()) {
      throw value.buildCodeFrameError("Can only bind to variable names.");
    }
    const tempId = import_compiler.types.identifier("_");
    const changeAttr = import_compiler.types.markoAttribute(`${attr.node.name}Change`, import_compiler.types.arrowFunctionExpression([tempId], import_compiler.types.assignmentExpression("=", value.node, tempId)));
    attr.node.bound = false;
    changeAttr.extra = { ___wasBound: true };
    attr.insertAfter(changeAttr);
  }
};
var attribute_bindings_default = {
  Program(program) {
    program.traverse(AttributeVisitor);
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {});
