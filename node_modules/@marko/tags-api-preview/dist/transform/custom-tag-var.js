var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var custom_tag_var_exports = {};
__export(custom_tag_var_exports, {
  default: () => custom_tag_var_default
});
module.exports = __toCommonJS(custom_tag_var_exports);
var import_compiler = require("@marko/compiler");
var import_babel_utils = require("@marko/babel-utils");
var import_import_runtime = require("../util/import-runtime");
var import_wrapper_component = require("./wrapper-component");
var custom_tag_var_default = {
  MarkoTag: {
    enter(tag) {
      if (!isCustomTagWithVar(tag)) {
        return;
      }
      const { node } = tag;
      const tagVar = node.var;
      const tagVarReplacement = import_compiler.types.objectPattern([
        import_compiler.types.objectProperty(import_compiler.types.identifier("default"), tagVar)
      ]);
      const meta = (0, import_wrapper_component.closest)(tag.parentPath);
      const returnValueId = tag.scope.generateUidIdentifier(`${tag.node.name.value}Return`);
      tag.set("var", tagVarReplacement);
      tag.pushContainer("attributes", [
        import_compiler.types.markoAttribute("_return", returnValueId)
      ]);
      tag.insertBefore(import_compiler.types.markoScriptlet([
        import_compiler.types.variableDeclaration("var", [
          import_compiler.types.variableDeclarator(returnValueId, import_compiler.types.callExpression((0, import_import_runtime.importRuntimeDefault)(tag.hub.file, "components/return", "return"), [meta.component]))
        ])
      ]));
      tag.insertAfter(import_compiler.types.markoScriptlet([
        import_compiler.types.variableDeclaration("const", [
          import_compiler.types.variableDeclarator(tagVarReplacement, import_compiler.types.callExpression(returnValueId, []))
        ])
      ]));
    },
    exit(tag) {
      if (isCustomTagWithVar(tag)) {
        tag.node.var = null;
      }
    }
  }
};
function isCustomTagWithVar(tag) {
  var _a;
  return tag.node.var && !((0, import_babel_utils.isNativeTag)(tag) || (0, import_babel_utils.isAttributeTag)(tag) || (0, import_babel_utils.isDynamicTag)(tag) || ((_a = (0, import_babel_utils.getTagDef)(tag)) == null ? void 0 : _a.translator));
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {});
