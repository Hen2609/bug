var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var feature_detection_exports = {};
__export(feature_detection_exports, {
  default: () => feature_detection_default
});
module.exports = __toCommonJS(feature_detection_exports);
var import_babel_utils = require("@marko/babel-utils");
var import_taglib_id = require("../util/taglib-id");
var import_build_aggregate_error = require("../util/build-aggregate-error");
const featureDetectionVisitor = {
  MarkoComment(comment, state) {
    if (/^\s*use tags\s*$/.test(comment.node.value)) {
      addFeature(state, "tags", "<!-- use tags -->", comment);
    }
  },
  MarkoScriptlet(scriptlet, state) {
    if (!scriptlet.node.static) {
      addFeature(state, "class", "Scriptlet", scriptlet);
    }
  },
  MarkoClass(markoClass, state) {
    addFeature(state, "class", "Class block", markoClass.get("body"));
  },
  ReferencedIdentifier(ref, state) {
    const name = ref.node.name;
    if ((name === "input" || name === "component" || name === "out") && !ref.scope.hasBinding(name)) {
      addFeature(state, "class", `${name} template global`, ref);
    }
  },
  MarkoTag(tag, state) {
    var _a, _b;
    if (tag.node.var) {
      addFeature(state, "tags", "Tag variable", tag.get("var"));
    }
    for (const attr of tag.get("attributes")) {
      if (attr.isMarkoAttribute()) {
        if ((_a = attr.node.arguments) == null ? void 0 : _a.length) {
          addFeature(state, "class", "Attribute arguments", attr.get("arguments")[0]);
          break;
        } else if (attr.node.modifier) {
          addFeature(state, "class", "Attribute modifier", attr);
          break;
        } else if (attr.node.bound) {
          addFeature(state, "tags", "Bound attribute", attr);
          break;
        }
      }
    }
    const tagDef = (0, import_babel_utils.getTagDef)(tag);
    if (tagDef) {
      switch (tagDef.taglibId) {
        case "marko-html":
        case "marko-math":
        case "marko-svg": {
          for (const attr of tag.get("attributes")) {
            if (attr.isMarkoAttribute()) {
              switch (attr.node.name) {
                case "key":
                case "no-update":
                case "no-update-if":
                case "no-update-body-if":
                  addFeature(state, "class", `"${attr.node.name}" attribute`, attr);
                  break;
              }
            }
          }
          break;
        }
        case "marko-default-core":
          switch (tagDef.name) {
            case "if":
            case "for":
            case "else":
            case "else-if":
            case "import":
            case "style":
            case "html-comment":
            case "body":
            case "head":
              break;
            default:
              addFeature(state, "class", `<${tagDef.name}> tag`, tag.get("name"));
              break;
          }
          break;
        case import_taglib_id.taglibId:
          switch (tagDef.name) {
            case "if":
            case "else-if":
            case "for":
            case "style":
              break;
            default:
              addFeature(state, "tags", `<${tagDef.name}> tag`, tag.get("name"));
          }
          break;
      }
    } else if ((0, import_babel_utils.isDynamicTag)(tag) && ((_b = tag.node.arguments) == null ? void 0 : _b.length)) {
      addFeature(state, "class", "Dynamic tag arguments", tag);
    }
  }
};
var feature_detection_default = {
  Program(program) {
    var _a, _b, _c;
    const state = {};
    (_b = (_a = program.node).extra) != null ? _b : _a.extra = {};
    program.traverse(featureDetectionVisitor, state);
    program.node.extra.___featureType = ((_c = state.feature) == null ? void 0 : _c.type) || "class";
  }
};
function addFeature(state, type, name, path) {
  if (state.feature) {
    if (state.feature.type !== type) {
      throw (0, import_build_aggregate_error.buildAggregateError)(path.hub.file, 'Cannot mix "tags api" and "class api" features', [state.feature.name, state.feature.path], [name, path]);
    }
  } else {
    state.feature = {
      name,
      path,
      type
    };
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {});
