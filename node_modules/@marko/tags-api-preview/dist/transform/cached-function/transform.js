var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var transform_exports = {};
__export(transform_exports, {
  default: () => transform_default
});
module.exports = __toCommonJS(transform_exports);
var import_babel_utils = require("@marko/babel-utils");
var import_compiler = require("@marko/compiler");
var import_import_runtime = require("../../util/import-runtime");
var import_is_core_tag = __toESM(require("../../util/is-core-tag"));
var import_get_attr = __toESM(require("../../util/get-attr"));
var import_is_api = __toESM(require("../../util/is-api"));
var import_wrapper_component = require("../wrapper-component");
const depsVisitor = {
  Function(fn, state) {
    if (fn === state.root)
      fn.skip();
  },
  ReferencedIdentifier: (identifier, state) => {
    const { name } = identifier.node;
    const binding = identifier.scope.getBinding(name);
    if (binding) {
      const bindingTag = binding.path;
      if (bindingTag.isMarkoTag() && !((0, import_babel_utils.isNativeTag)(bindingTag) || (0, import_babel_utils.isDynamicTag)(bindingTag))) {
        let isDep = false;
        if ((0, import_is_core_tag.default)("const", binding.path)) {
          const nestedState = state.shallow ? state : { root: state.root, shallow: true };
          (0, import_get_attr.default)(bindingTag, "default").traverse(depsVisitor, nestedState);
          isDep = !!nestedState.deps;
        } else {
          isDep = true;
        }
        if (isDep) {
          if (state.shallow) {
            state.deps = true;
            identifier.stop();
          } else {
            (state.deps || (state.deps = /* @__PURE__ */ new Set())).add(identifier.node.name);
          }
        }
      }
    }
  }
};
var transform_default = {
  Function(fn) {
    if ((0, import_is_api.default)(fn, "class"))
      return;
    const parentTag = fn.findParent((parent) => parent.isMarkoTag());
    if (!fn.isExpression() || !parentTag || (0, import_babel_utils.isNativeTag)(parentTag)) {
      return;
    }
    const state = { root: fn };
    fn.skip();
    fn.traverse(depsVisitor, state);
    if (state.deps) {
      const { file } = fn.hub;
      const { component } = (0, import_wrapper_component.ensureLifecycle)(parentTag);
      fn.replaceWith(import_compiler.types.callExpression((0, import_import_runtime.importRuntimeNamed)(file, "transform/cached-function", "cache"), [
        import_compiler.types.logicalExpression("||", import_compiler.types.callExpression((0, import_import_runtime.importRuntimeNamed)(file, "transform/cached-function", "cached"), [
          component,
          import_compiler.types.arrayExpression(Array.from(state.deps, toIdentifier))
        ]), fn.node)
      ]));
    }
  }
};
function toIdentifier(val) {
  return import_compiler.types.identifier(val);
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {});
