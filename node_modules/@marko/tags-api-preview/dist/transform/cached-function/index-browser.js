var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var index_browser_exports = {};
__export(index_browser_exports, {
  cache: () => cache,
  cached: () => cached
});
module.exports = __toCommonJS(index_browser_exports);
var import_patch_lifecycle = __toESM(require("../../util/patch-lifecycle"));
const metaKey = Symbol();
const indexKey = Symbol();
let curComponent;
let isCached = false;
const lifecycleMethods = {
  onMount: resetIndex,
  onUpdate: resetIndex
};
function cached(component, cur) {
  const meta = component[metaKey];
  const index = component[indexKey];
  curComponent = component;
  if (meta) {
    if (index === void 0) {
      meta.push(cur);
      return false;
    }
    const prev = meta[index];
    component[indexKey] += 2;
    for (let i = prev.length; i--; ) {
      if (prev[i] !== cur[i]) {
        meta[index] = cur;
        return false;
      }
    }
    return isCached = true;
  }
  (0, import_patch_lifecycle.default)(component, lifecycleMethods);
  component[metaKey] = [cur];
  return false;
}
function cache(val) {
  const meta = curComponent[metaKey];
  const index = curComponent[indexKey];
  curComponent = void 0;
  if (isCached) {
    isCached = false;
    return index === void 0 ? meta[meta.length - 1] : meta[index - 1];
  }
  if (index == void 0) {
    meta.push(val);
  } else {
    meta[index - 1] = val;
  }
  return val;
}
function resetIndex() {
  this[indexKey] = 0;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  cache,
  cached
});
