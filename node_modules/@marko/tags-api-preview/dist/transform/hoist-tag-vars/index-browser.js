var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
var import_track_rendering = require("../../translate/track-rendering");
var import_patch_lifecycle = __toESM(require("../../util/patch-lifecycle"));
const hoistsKey = Symbol();
const hoistIndexKey = Symbol();
const hoistedSettersKey = Symbol();
const lifecycleMethods = {
  onMount: onUpdate,
  onUpdate,
  onDestroy
};
function createHoist(owner, name, hoister) {
  let initialized = false;
  let val;
  return function setOrCheckDefined(child, newVal) {
    if (child) {
      if (initialized || child === true) {
        if (val !== (val = newVal)) {
          hoister(val);
          owner.forceUpdate();
        }
      } else {
        val = newVal;
        hoister(val);
        initialized = true;
        if (child[hoistedSettersKey]) {
          child[hoistedSettersKey].add(setOrCheckDefined);
        } else {
          (0, import_patch_lifecycle.default)(child, lifecycleMethods);
          child[hoistedSettersKey] = /* @__PURE__ */ new Set([setOrCheckDefined]);
        }
      }
    } else if ((0, import_track_rendering.isRendering)()) {
      throw new ReferenceError(`Cannot access '${name}' before initialization`);
    }
    return val;
  };
}
function onUpdate() {
  this[hoistIndexKey] = 0;
}
function onDestroy() {
  if (this[hoistedSettersKey]) {
    for (const set of this[hoistedSettersKey]) {
      set(true);
    }
  }
}
module.exports = function hoist(owner, name, hoister) {
  const hoists = owner[hoistsKey];
  const index = owner[hoistIndexKey];
  let result;
  if (hoists) {
    if (index === void 0) {
      hoists.push(result = createHoist(owner, name, hoister));
    } else {
      result = hoists[index];
    }
  } else {
    (0, import_patch_lifecycle.default)(owner, lifecycleMethods);
    owner[hoistsKey] = [result = createHoist(owner, name, hoister)];
  }
  return result;
};
