import {
  init_track_rendering,
  isRendering
} from "../../chunk-C36RCGTF.mjs";
import {
  require_patch_lifecycle
} from "../../chunk-5WRUZCBU.mjs";
import {
  __commonJS,
  __toESM
} from "../../chunk-XYON6ZHC.mjs";

// src/transform/hoist-tag-vars/index-browser.ts
var require_index_browser = __commonJS({
  "src/transform/hoist-tag-vars/index-browser.ts"(exports, module) {
    init_track_rendering();
    var import_patch_lifecycle = __toESM(require_patch_lifecycle());
    var hoistsKey = Symbol();
    var hoistIndexKey = Symbol();
    var hoistedSettersKey = Symbol();
    var lifecycleMethods = {
      onMount: onUpdate,
      onUpdate,
      onDestroy
    };
    function createHoist(owner, name, hoister) {
      let initialized = false;
      let val;
      return function setOrCheckDefined(child, newVal) {
        if (child) {
          if (initialized || child === true) {
            if (val !== (val = newVal)) {
              hoister(val);
              owner.forceUpdate();
            }
          } else {
            val = newVal;
            hoister(val);
            initialized = true;
            if (child[hoistedSettersKey]) {
              child[hoistedSettersKey].add(setOrCheckDefined);
            } else {
              (0, import_patch_lifecycle.default)(child, lifecycleMethods);
              child[hoistedSettersKey] = /* @__PURE__ */ new Set([setOrCheckDefined]);
            }
          }
        } else if (isRendering()) {
          throw new ReferenceError(`Cannot access '${name}' before initialization`);
        }
        return val;
      };
    }
    function onUpdate() {
      this[hoistIndexKey] = 0;
    }
    function onDestroy() {
      if (this[hoistedSettersKey]) {
        for (const set of this[hoistedSettersKey]) {
          set(true);
        }
      }
    }
    module.exports = function hoist(owner, name, hoister) {
      const hoists = owner[hoistsKey];
      const index = owner[hoistIndexKey];
      let result;
      if (hoists) {
        if (index === void 0) {
          hoists.push(result = createHoist(owner, name, hoister));
        } else {
          result = hoists[index];
        }
      } else {
        (0, import_patch_lifecycle.default)(owner, lifecycleMethods);
        owner[hoistsKey] = [result = createHoist(owner, name, hoister)];
      }
      return result;
    };
  }
});
export default require_index_browser();
