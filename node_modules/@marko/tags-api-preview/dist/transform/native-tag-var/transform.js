var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var transform_exports = {};
__export(transform_exports, {
  default: () => transform_default
});
module.exports = __toCommonJS(transform_exports);
var import_compiler = require("@marko/compiler");
var import_babel_utils = require("@marko/babel-utils");
var import_is_core_tag = __toESM(require("../../util/is-core-tag"));
var import_import_runtime = require("../../util/import-runtime");
var import_wrapper_component = require("../wrapper-component");
var transform_default = {
  MarkoTag: {
    enter(tag) {
      const {
        node,
        hub: { file }
      } = tag;
      const tagVar = node.var;
      if (!(tagVar && ((0, import_babel_utils.isNativeTag)(tag) && !(0, import_is_core_tag.default)("style", tag) || (0, import_babel_utils.isDynamicTag)(tag)))) {
        return;
      }
      if (!import_compiler.types.isIdentifier(tagVar)) {
        throw tag.get("var").buildCodeFrameError("A tag variable on a native tag cannot be destructured.");
      }
      const meta = (0, import_wrapper_component.closest)(tag.parentPath);
      const keyString = import_compiler.types.stringLiteral(`${meta.refIndex++}`);
      tag.insertBefore(import_compiler.types.markoScriptlet([
        import_compiler.types.variableDeclaration("const", [
          import_compiler.types.variableDeclarator(tagVar, import_compiler.types.callExpression((0, import_import_runtime.importRuntimeDefault)(file, "transform/native-tag-var", "createRef"), [meta.component, keyString]))
        ])
      ]));
      tag.pushContainer("attributes", import_compiler.types.markoAttribute("key", keyString));
    },
    exit(tag) {
      if (tag.node.var && ((0, import_babel_utils.isNativeTag)(tag) || (0, import_babel_utils.isDynamicTag)(tag))) {
        tag.node.var = null;
      }
    }
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {});
