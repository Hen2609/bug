var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var assignments_to_change_call_exports = {};
__export(assignments_to_change_call_exports, {
  default: () => assignments_to_change_call_default
});
module.exports = __toCommonJS(assignments_to_change_call_exports);
var import_compiler = require("@marko/compiler");
var import_transform = __toESM(require("../util/replace-assignments/transform"));
var assignments_to_change_call_default = {
  MarkoTag: {
    exit(tag) {
      const tagVar = tag.get("var");
      if (!tagVar.node || tagVar.isIdentifier()) {
        return;
      }
      forEachBindingIdentifier(tagVar, updateAssignmentsForIdentifier);
    }
  }
};
function updateAssignmentsForIdentifier(identifier) {
  const binding = identifier.scope.getBinding(identifier.node.name);
  const assignments = binding.constantViolations;
  if (!assignments.length)
    return;
  let changeKey;
  let parent = identifier.parentPath;
  if (parent.isRestElement()) {
    throw assignments[0].buildCodeFrameError("Cannot assign to a ...rest element.");
  }
  if (parent.isAssignmentPattern()) {
    parent = parent.parentPath;
  }
  if (parent.isArrayPattern()) {
    throw assignments[0].buildCodeFrameError("Assignment to a destructured array will come in a future version of the tags api preview.");
  }
  if (parent.isObjectProperty()) {
    const pattern = parent.parentPath;
    if (parent.node.computed) {
      changeKey = identifier.scope.generateUidIdentifier(`${identifier.node.name}Change`);
      pattern.pushContainer("properties", import_compiler.types.objectProperty(import_compiler.types.binaryExpression("+", parent.get("key").node, import_compiler.types.stringLiteral("Change")), changeKey, true));
    } else {
      const key = parent.get("key");
      const searchKey = `${getStringOrIdentifierValue(key)}Change`;
      for (const prop of pattern.get("properties")) {
        if (prop.isObjectProperty()) {
          const propKey = prop.get("key");
          const propValue = prop.get("value");
          if (!prop.node.computed && getStringOrIdentifierValue(propKey) === searchKey && propValue.isIdentifier()) {
            changeKey = propValue.node;
            break;
          }
        }
      }
      if (!changeKey) {
        pattern.unshiftContainer("properties", import_compiler.types.objectProperty(import_compiler.types.stringLiteral(searchKey), changeKey = identifier.scope.generateUidIdentifier(searchKey)));
      }
    }
  }
  (0, import_transform.default)(binding, changeKey);
}
function forEachBindingIdentifier(path, fn) {
  switch (path.node.type) {
    case "ObjectPattern":
      for (const prop of path.get("properties")) {
        forEachBindingIdentifier(prop.isObjectProperty() ? prop.get("value") : prop, fn);
      }
      break;
    case "ArrayPattern":
      for (const el of path.get("elements")) {
        forEachBindingIdentifier(el, fn);
      }
      break;
    case "RestElement":
      forEachBindingIdentifier(path.get("argument"), fn);
      break;
    case "AssignmentPattern":
      forEachBindingIdentifier(path.get("left"), fn);
      break;
    case "Identifier":
      fn(path);
      break;
  }
}
function getStringOrIdentifierValue(path) {
  return path.isStringLiteral() ? path.node.value : path.node.name;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {});
