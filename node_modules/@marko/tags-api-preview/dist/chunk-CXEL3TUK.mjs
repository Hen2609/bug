import {
  init_is_api,
  isApi
} from "./chunk-EGIQZ5A4.mjs";
import {
  __esm
} from "./chunk-XYON6ZHC.mjs";

// src/transform/tag-body-parameters.ts
import { types as t } from "@marko/compiler";
import { getTagDef } from "@marko/babel-utils";
var tag_body_parameters_default;
var init_tag_body_parameters = __esm({
  "src/transform/tag-body-parameters.ts"() {
    init_is_api();
    tag_body_parameters_default = {
      MarkoTag(tag) {
        const body = tag.get("body");
        const params = body.get("params");
        const tagDef = getTagDef(tag);
        if (isApi(tag, "class") || !params.length || (tagDef == null ? void 0 : tagDef.translator)) {
          return;
        }
        for (const name in body.getBindingIdentifiers()) {
          const binding = body.scope.getBinding(name);
          if (binding) {
            const [assignment] = binding.constantViolations;
            if (assignment) {
              throw assignment.buildCodeFrameError("Cannot assign to tag body parameters in the tags api preview.");
            }
          }
        }
        body.node.params = [
          t.assignmentPattern(t.objectPattern([
            t.objectProperty(t.identifier("default"), t.assignmentPattern(t.arrayPattern(body.node.params), t.arrayExpression([])))
          ]), t.objectExpression([]))
        ];
      }
    };
  }
});

export {
  tag_body_parameters_default,
  init_tag_body_parameters
};
