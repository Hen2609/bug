import {
  importRuntimeNamed,
  init_import_runtime
} from "./chunk-BCNAFPHP.mjs";
import {
  init_is_api,
  isApi
} from "./chunk-EGIQZ5A4.mjs";
import {
  __esm
} from "./chunk-XYON6ZHC.mjs";

// src/translate/track-rendering/translate.ts
import { types as t } from "@marko/compiler";
var translate_default;
var init_translate = __esm({
  "src/translate/track-rendering/translate.ts"() {
    init_import_runtime();
    init_is_api();
    translate_default = {
      Program: {
        exit(program) {
          const file = program.hub.file;
          const isHTML = file.markoOpts.output === "html";
          if (isHTML || isApi(program, "class"))
            return;
          const renderBlock = file._renderBlock;
          renderBlock.node.body = [
            t.expressionStatement(t.callExpression(importRuntimeNamed(file, "translate/track-rendering", "begin"), [])),
            t.tryStatement(t.blockStatement(renderBlock.node.body), null, t.blockStatement([
              t.expressionStatement(t.callExpression(importRuntimeNamed(file, "translate/track-rendering", "end"), []))
            ]))
          ];
        }
      }
    };
  }
});

export {
  translate_default,
  init_translate
};
