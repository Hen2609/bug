import {
  importRuntimeDefault,
  init_import_runtime
} from "./chunk-BCNAFPHP.mjs";
import {
  closest,
  init_wrapper_component
} from "./chunk-TFXOVXSS.mjs";
import {
  __esm
} from "./chunk-XYON6ZHC.mjs";

// src/transform/custom-tag-var.ts
import { types as t } from "@marko/compiler";
import {
  isNativeTag,
  isDynamicTag,
  isAttributeTag,
  getTagDef
} from "@marko/babel-utils";
function isCustomTagWithVar(tag) {
  var _a;
  return tag.node.var && !(isNativeTag(tag) || isAttributeTag(tag) || isDynamicTag(tag) || ((_a = getTagDef(tag)) == null ? void 0 : _a.translator));
}
var custom_tag_var_default;
var init_custom_tag_var = __esm({
  "src/transform/custom-tag-var.ts"() {
    init_import_runtime();
    init_wrapper_component();
    custom_tag_var_default = {
      MarkoTag: {
        enter(tag) {
          if (!isCustomTagWithVar(tag)) {
            return;
          }
          const { node } = tag;
          const tagVar = node.var;
          const tagVarReplacement = t.objectPattern([
            t.objectProperty(t.identifier("default"), tagVar)
          ]);
          const meta = closest(tag.parentPath);
          const returnValueId = tag.scope.generateUidIdentifier(`${tag.node.name.value}Return`);
          tag.set("var", tagVarReplacement);
          tag.pushContainer("attributes", [
            t.markoAttribute("_return", returnValueId)
          ]);
          tag.insertBefore(t.markoScriptlet([
            t.variableDeclaration("var", [
              t.variableDeclarator(returnValueId, t.callExpression(importRuntimeDefault(tag.hub.file, "components/return", "return"), [meta.component]))
            ])
          ]));
          tag.insertAfter(t.markoScriptlet([
            t.variableDeclaration("const", [
              t.variableDeclarator(tagVarReplacement, t.callExpression(returnValueId, []))
            ])
          ]));
        },
        exit(tag) {
          if (isCustomTagWithVar(tag)) {
            tag.node.var = null;
          }
        }
      }
    };
  }
});

export {
  custom_tag_var_default,
  init_custom_tag_var
};
