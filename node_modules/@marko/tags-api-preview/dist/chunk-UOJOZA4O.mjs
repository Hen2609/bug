import {
  init_transform,
  transform_default
} from "./chunk-YQG3LUWZ.mjs";
import {
  importRuntimeDefault,
  init_import_runtime
} from "./chunk-BCNAFPHP.mjs";
import {
  __esm
} from "./chunk-XYON6ZHC.mjs";

// src/util/replace-assignments/transform.ts
import { types as t } from "@marko/compiler";
function replaceAssignments(binding, fnExpression) {
  var _a;
  const file = binding.path.hub.file;
  for (const assignment of binding.constantViolations) {
    let value;
    if (assignment.isUpdateExpression()) {
      value = t.binaryExpression(assignment.node.operator === "++" ? "+" : "-", binding.identifier, t.numericLiteral(1));
    } else if (assignment.isAssignmentExpression()) {
      value = assignment.node.operator === "=" ? transform_default(file, assignment.node.right) : t.binaryExpression(assignment.node.operator.slice(0, -1), binding.identifier, assignment.node.right);
    }
    if (value) {
      const parent = assignment.parentPath;
      if (parent.isFunction() && parent.parentPath.isMarkoAttribute() && ((_a = parent.parentPath.node.extra) == null ? void 0 : _a.___wasBound)) {
        parent.replaceWith(fnExpression);
      } else {
        assignment.replaceWith(t.callExpression(importRuntimeDefault(file, "util/replace-assignments", "assign"), [fnExpression, value]));
      }
    }
  }
}
var init_transform2 = __esm({
  "src/util/replace-assignments/transform.ts"() {
    init_import_runtime();
    init_transform();
  }
});

export {
  replaceAssignments,
  init_transform2 as init_transform
};
