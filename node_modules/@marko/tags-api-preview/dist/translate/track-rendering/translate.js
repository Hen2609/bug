var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var translate_exports = {};
__export(translate_exports, {
  default: () => translate_default
});
module.exports = __toCommonJS(translate_exports);
var import_compiler = require("@marko/compiler");
var import_import_runtime = require("../../util/import-runtime");
var import_is_api = __toESM(require("../../util/is-api"));
var translate_default = {
  Program: {
    exit(program) {
      const file = program.hub.file;
      const isHTML = file.markoOpts.output === "html";
      if (isHTML || (0, import_is_api.default)(program, "class"))
        return;
      const renderBlock = file._renderBlock;
      renderBlock.node.body = [
        import_compiler.types.expressionStatement(import_compiler.types.callExpression((0, import_import_runtime.importRuntimeNamed)(file, "translate/track-rendering", "begin"), [])),
        import_compiler.types.tryStatement(import_compiler.types.blockStatement(renderBlock.node.body), null, import_compiler.types.blockStatement([
          import_compiler.types.expressionStatement(import_compiler.types.callExpression((0, import_import_runtime.importRuntimeNamed)(file, "translate/track-rendering", "end"), []))
        ]))
      ];
    }
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {});
