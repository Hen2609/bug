const eventNameReg = /^on[A-Z]/;
const changeNameReg = /Change$/;
const bindsByTag = {};
registerBind("input", "value");
registerBind("input", "checked");
registerBind("textarea", "value");
function registerBind(tag, prop) {
  bindsByTag[tag] = bindsByTag[tag] || {};
  bindsByTag[tag][prop] = (change) => (e) => change(e.target[prop]);
}
module.exports = (attrs, def, tag, meta) => {
  const binds = bindsByTag[tag];
  const resultAttrs = {};
  for (const key in attrs) {
    const val = attrs[key];
    if (eventNameReg.test(key)) {
      if (val) {
        const eventName = key.toLowerCase();
        meta[eventName] = def.d(eventName.slice(2), val, false);
      }
    } else if (!((binds == null ? void 0 : binds[key]) || changeNameReg.test(key))) {
      resultAttrs[key] = val;
    }
  }
  if (binds) {
    for (const key in binds) {
      const handler = attrs[`${key}Change`];
      resultAttrs[key] = attrs[key];
      if (handler) {
        meta.oninput = def.d("input", binds[key](handler), false);
      } else {
        (meta.pa || (meta.pa = [])).push(key);
      }
    }
  }
  return resultAttrs;
};
