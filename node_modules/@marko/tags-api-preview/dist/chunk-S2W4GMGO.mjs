import {
  init_is_core_tag,
  isCoreTag
} from "./chunk-MU57322L.mjs";
import {
  importRuntimeDefault,
  init_import_runtime
} from "./chunk-BCNAFPHP.mjs";
import {
  closest,
  init_wrapper_component
} from "./chunk-TFXOVXSS.mjs";
import {
  __esm
} from "./chunk-XYON6ZHC.mjs";

// src/transform/native-tag-var/transform.ts
import { types as t } from "@marko/compiler";
import { isNativeTag, isDynamicTag } from "@marko/babel-utils";
var transform_default;
var init_transform = __esm({
  "src/transform/native-tag-var/transform.ts"() {
    init_is_core_tag();
    init_import_runtime();
    init_wrapper_component();
    transform_default = {
      MarkoTag: {
        enter(tag) {
          const {
            node,
            hub: { file }
          } = tag;
          const tagVar = node.var;
          if (!(tagVar && (isNativeTag(tag) && !isCoreTag("style", tag) || isDynamicTag(tag)))) {
            return;
          }
          if (!t.isIdentifier(tagVar)) {
            throw tag.get("var").buildCodeFrameError("A tag variable on a native tag cannot be destructured.");
          }
          const meta = closest(tag.parentPath);
          const keyString = t.stringLiteral(`${meta.refIndex++}`);
          tag.insertBefore(t.markoScriptlet([
            t.variableDeclaration("const", [
              t.variableDeclarator(tagVar, t.callExpression(importRuntimeDefault(file, "transform/native-tag-var", "createRef"), [meta.component, keyString]))
            ])
          ]));
          tag.pushContainer("attributes", t.markoAttribute("key", keyString));
        },
        exit(tag) {
          if (tag.node.var && (isNativeTag(tag) || isDynamicTag(tag))) {
            tag.node.var = null;
          }
        }
      }
    };
  }
});

export {
  transform_default,
  init_transform
};
