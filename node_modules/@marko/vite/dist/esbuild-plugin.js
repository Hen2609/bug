"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var esbuild_plugin_exports = {};
__export(esbuild_plugin_exports, {
  default: () => esbuildPlugin
});
module.exports = __toCommonJS(esbuild_plugin_exports);
var import_fs = __toESM(require("fs"));
var import_path = __toESM(require("path"));
const markoErrorRegExp = /^(.+?)(?:\((\d+)(?:\s*,\s*(\d+))?\))?: (.*)$/gm;
function esbuildPlugin(compiler, config) {
  return {
    name: "marko",
    async setup(build) {
      const { platform = "browser" } = build.initialOptions;
      const virtualFiles = /* @__PURE__ */ new Map();
      const finalConfig = {
        ...config,
        output: platform === "browser" ? "dom" : "html",
        resolveVirtualDependency(from, dep) {
          virtualFiles.set(import_path.default.join(from, "..", dep.virtualPath), dep);
          return dep.virtualPath;
        }
      };
      if (platform === "browser") {
        build.onResolve({ filter: /\.marko\./ }, (args) => {
          return {
            namespace: "marko:virtual",
            path: import_path.default.resolve(args.resolveDir, args.path)
          };
        });
        build.onLoad({ filter: /\.marko\./, namespace: "marko:virtual" }, (args) => ({
          contents: virtualFiles.get(args.path).code,
          loader: import_path.default.extname(args.path).slice(1)
        }));
      }
      build.onLoad({ filter: /\.marko$/ }, async (args) => {
        try {
          const { code, meta } = await compiler.compileFile(args.path, finalConfig);
          return {
            loader: "js",
            contents: code,
            watchFiles: meta.watchFiles,
            resolveDir: import_path.default.dirname(args.path)
          };
        } catch (e) {
          const text = e.message;
          const errors = [];
          let match;
          let lines;
          while (match = markoErrorRegExp.exec(text)) {
            const [, file, rawLine, rawCol, text2] = match;
            const line = parseInt(rawLine, 10) || 1;
            const column = parseInt(rawCol, 10) || 1;
            lines || (lines = (await import_fs.default.promises.readFile(args.path, "utf-8")).split(/\n/g));
            errors.push({
              text: text2,
              location: {
                file,
                line,
                column,
                lineText: ` ${lines[line - 1]}`
              }
            });
          }
          if (!errors.length) {
            errors.push({ text });
          }
          return {
            errors
          };
        }
      });
    }
  };
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {});
