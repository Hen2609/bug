// src/esbuild-plugin.ts
import fs from "fs";
import path from "path";
var markoErrorRegExp = /^(.+?)(?:\((\d+)(?:\s*,\s*(\d+))?\))?: (.*)$/gm;
function esbuildPlugin(compiler, config) {
  return {
    name: "marko",
    async setup(build) {
      const { platform = "browser" } = build.initialOptions;
      const virtualFiles = /* @__PURE__ */ new Map();
      const finalConfig = {
        ...config,
        output: platform === "browser" ? "dom" : "html",
        resolveVirtualDependency(from, dep) {
          virtualFiles.set(path.join(from, "..", dep.virtualPath), dep);
          return dep.virtualPath;
        }
      };
      if (platform === "browser") {
        build.onResolve({ filter: /\.marko\./ }, (args) => {
          return {
            namespace: "marko:virtual",
            path: path.resolve(args.resolveDir, args.path)
          };
        });
        build.onLoad({ filter: /\.marko\./, namespace: "marko:virtual" }, (args) => ({
          contents: virtualFiles.get(args.path).code,
          loader: path.extname(args.path).slice(1)
        }));
      }
      build.onLoad({ filter: /\.marko$/ }, async (args) => {
        try {
          const { code, meta } = await compiler.compileFile(args.path, finalConfig);
          return {
            loader: "js",
            contents: code,
            watchFiles: meta.watchFiles,
            resolveDir: path.dirname(args.path)
          };
        } catch (e) {
          const text = e.message;
          const errors = [];
          let match;
          let lines;
          while (match = markoErrorRegExp.exec(text)) {
            const [, file, rawLine, rawCol, text2] = match;
            const line = parseInt(rawLine, 10) || 1;
            const column = parseInt(rawCol, 10) || 1;
            lines || (lines = (await fs.promises.readFile(args.path, "utf-8")).split(/\n/g));
            errors.push({
              text: text2,
              location: {
                file,
                line,
                column,
                lineText: ` ${lines[line - 1]}`
              }
            });
          }
          if (!errors.length) {
            errors.push({ text });
          }
          return {
            errors
          };
        }
      });
    }
  };
}

export {
  esbuildPlugin
};
