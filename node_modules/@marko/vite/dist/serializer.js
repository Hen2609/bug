"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var serializer_exports = {};
__export(serializer_exports, {
  default: () => serialize
});
module.exports = __toCommonJS(serializer_exports);
var import_domelementtype = require("domelementtype");
const voidElements = /* @__PURE__ */ new Set([
  "area",
  "base",
  "br",
  "col",
  "embed",
  "hr",
  "img",
  "input",
  "link",
  "meta",
  "param",
  "source",
  "track",
  "wbr"
]);
function serialize(nodes, parts) {
  let curString = parts ? parts.pop() : "";
  parts ?? (parts = []);
  for (const node of nodes) {
    switch (node.type) {
      case import_domelementtype.ElementType.Tag:
      case import_domelementtype.ElementType.Style:
      case import_domelementtype.ElementType.Script: {
        const tag = node;
        const { name } = tag;
        curString += `<${name}`;
        switch (tag.tagName) {
          case "script":
            parts.push(curString);
            curString = "";
            break;
          case "style":
            parts.push(curString);
            curString = "";
            break;
          case "link":
            if (tag.attribs.rel === "stylesheet") {
              parts.push(curString);
              curString = "";
            }
            break;
        }
        for (const attr of tag.attributes) {
          curString += ` ${attr.value === "" ? attr.name : `${attr.name}="${attr.value.replace(/"/g, "&#39;")}"`}`;
        }
        curString += ">";
        if (tag.children.length) {
          parts.push(curString);
          serialize(tag.children, parts);
          curString = parts.pop();
        }
        if (!voidElements.has(name)) {
          curString += `</${name}>`;
        }
        break;
      }
      case import_domelementtype.ElementType.Text: {
        const text = node.data;
        if (!/^\s*$/.test(text)) {
          curString += text;
        }
        break;
      }
      case import_domelementtype.ElementType.Comment:
        curString += `<!--${node.data}-->`;
        break;
    }
  }
  if (curString) {
    parts.push(curString);
  }
  return parts;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {});
