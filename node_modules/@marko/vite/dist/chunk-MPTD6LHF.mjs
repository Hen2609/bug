import {
  serialize
} from "./chunk-VL2HLMVE.mjs";

// src/manifest-generator.ts
import { Parser } from "htmlparser2";
import { ElementType } from "domelementtype";
import { DomHandler } from "domhandler";
var MARKER_COMMENT = "MARKO_VITE";
function generateDocManifest(rawHtml) {
  return new Promise((resolve, reject) => {
    const parser = new Parser(new DomHandler(function(err, dom) {
      if (err) {
        return reject(err);
      }
      const htmlChildren = dom.find(isElement).childNodes;
      const headPrepend = [];
      const head = [];
      const bodyPrepend = [];
      const body = [];
      splitNodesByMarker(htmlChildren.find((node) => isElement(node) && node.tagName === "head").childNodes, headPrepend, head);
      splitNodesByMarker(htmlChildren.find((node) => isElement(node) && node.tagName === "body").childNodes, bodyPrepend, body);
      resolve({
        "head-prepend": serializeOrNull(headPrepend),
        head: serializeOrNull(head),
        "body-prepend": serializeOrNull(bodyPrepend),
        body: serializeOrNull(body)
      });
    }));
    parser.write(rawHtml);
    parser.end();
  });
}
function generateInputDoc(entry) {
  return `<!DOCTYPE html><html><head><!--${MARKER_COMMENT}--></head><body><!--${MARKER_COMMENT}--><script async type="module" src=${JSON.stringify(entry)}><\/script></body></html>`;
}
function serializeOrNull(nodes) {
  const result = serialize(nodes);
  if (result.length) {
    return result;
  }
  return null;
}
function splitNodesByMarker(nodes, before, after) {
  for (let i = 0; i < nodes.length; i++) {
    let node = nodes[i];
    if (node.data === MARKER_COMMENT) {
      i++;
      for (; i < nodes.length; i++) {
        node = nodes[i];
        after.push(node);
      }
      break;
    }
    before.push(node);
  }
}
function isElement(node) {
  return node.type === ElementType.Tag;
}

export {
  generateDocManifest,
  generateInputDoc
};
