import {
  esbuildPlugin
} from "./chunk-Z64RCGRQ.mjs";
import {
  generateDocManifest,
  generateInputDoc
} from "./chunk-MPTD6LHF.mjs";
import "./chunk-VL2HLMVE.mjs";
import {
  server_entry_template_default
} from "./chunk-HWRQJHCN.mjs";

// src/index.ts
import os from "os";
import fs from "fs";
import path from "path";
import crypto from "crypto";
import anyMatch from "anymatch";
import { pathToFileURL, fileURLToPath } from "url";
import { relativeImportPath } from "relative-import-path";
var normalizePath = path.sep === "\\" ? (id) => id.replace(/\\/g, "/") : (id) => id;
var virtualFiles = /* @__PURE__ */ new Map();
var queryReg = /\?marko-.+$/;
var browserEntryQuery = "?marko-browser-entry";
var serverEntryQuery = "?marko-server-entry";
var virtualFileQuery = "?marko-virtual";
var markoExt = ".marko";
var htmlExt = ".html";
var resolveOpts = { skipSelf: true };
var cache = /* @__PURE__ */ new Map();
var thisFile = typeof __filename === "string" ? __filename : fileURLToPath(import.meta.url);
var tempDir;
function markoPlugin(opts = {}) {
  var _a;
  let compiler;
  const { runtimeId, linked = true } = opts;
  const baseConfig = {
    cache,
    runtimeId,
    sourceMaps: true,
    writeVersionComment: false,
    babelConfig: {
      ...opts.babelConfig,
      caller: {
        name: "@marko/vite",
        supportsStaticESM: true,
        supportsDynamicImport: true,
        supportsTopLevelAwait: true,
        supportsExportNamespaceFrom: true,
        ...(_a = opts.babelConfig) == null ? void 0 : _a.caller
      }
    }
  };
  const resolveViteVirtualDep = (from, dep) => {
    const query = `${virtualFileQuery}&id=${normalizePath(dep.virtualPath)}`;
    const id = normalizePath(from) + query;
    if (devServer) {
      const prev = virtualFiles.get(id);
      if (prev && prev.code !== dep.code) {
        devServer.moduleGraph.invalidateModule(devServer.moduleGraph.getModuleById(id));
      }
    }
    virtualFiles.set(id, dep);
    return `./${path.basename(from) + query}`;
  };
  const ssrConfig = {
    ...baseConfig,
    resolveVirtualDependency: resolveViteVirtualDep,
    output: "html"
  };
  const domConfig = {
    ...baseConfig,
    resolveVirtualDependency: resolveViteVirtualDep,
    output: "dom"
  };
  const hydrateConfig = {
    ...baseConfig,
    resolveVirtualDependency: resolveViteVirtualDep,
    output: "hydrate"
  };
  let root;
  let devEntryFile;
  let isBuild = false;
  let isSSRBuild = false;
  let devServer;
  let registeredTag = false;
  let serverManifest;
  const entrySources = /* @__PURE__ */ new Map();
  const transformWatchFiles = /* @__PURE__ */ new Map();
  const transformOptionalFiles = /* @__PURE__ */ new Map();
  return [
    {
      name: "marko-vite:pre",
      enforce: "pre",
      async config(config, env) {
        compiler ?? (compiler = await import(opts.compiler || "@marko/compiler"));
        root = normalizePath(config.root || process.cwd());
        devEntryFile = path.join(root, "index.html");
        isBuild = env.command === "build";
        isSSRBuild = isBuild && linked && Boolean(config.build.ssr);
        if (linked && !registeredTag) {
          const transformer = path.resolve(thisFile, "../render-assets-transform");
          registeredTag = normalizePath(path.resolve(thisFile, "../components", "vite.marko"));
          compiler.taglib.register("@marko/vite", {
            "<_vite>": { template: registeredTag },
            "<head>": { transformer },
            "<body>": { transformer }
          });
        }
        const lookup = compiler.taglib.buildLookup(root);
        const taglibDeps = [];
        for (const name in lookup.taglibsById) {
          const taglib = lookup.taglibsById[name];
          if (!/^marko-(.+-)?core$/.test(taglib.id) && /[\\/]node_modules[\\/]/.test(taglib.dirname)) {
            for (const tagName in taglib.tags) {
              const tag = taglib.tags[tagName];
              const entry = tag.template || tag.renderer;
              if (entry) {
                taglibDeps.push(relativeImportPath(devEntryFile, entry));
              }
            }
          }
        }
        const optimizeDeps = config.optimizeDeps ?? (config.optimizeDeps = {});
        optimizeDeps.include = Array.from(/* @__PURE__ */ new Set([
          ...optimizeDeps.include || [],
          ...compiler.getRuntimeEntryFiles("dom", opts.translator),
          ...compiler.getRuntimeEntryFiles("html", opts.translator),
          ...taglibDeps
        ]));
        const optimizeExtensions = optimizeDeps.extensions ?? (optimizeDeps.extensions = []);
        optimizeExtensions.push(".marko");
        const esbuildOptions = optimizeDeps.esbuildOptions ?? (optimizeDeps.esbuildOptions = {});
        const esbuildPlugins = esbuildOptions.plugins ?? (esbuildOptions.plugins = []);
        esbuildPlugins.push(esbuildPlugin(compiler, baseConfig));
        const ssr = config.ssr ?? (config.ssr = {});
        if (ssr.noExternal !== true) {
          ssr.noExternal = Array.from(new Set(taglibDeps.concat(ssr.noExternal || [])));
        }
      },
      configureServer(_server) {
        ssrConfig.hot = domConfig.hot = true;
        devServer = _server;
        devServer.watcher.on("all", (type, filename) => {
          if (type === "unlink") {
            entrySources.delete(filename);
          }
          for (const [id, files] of transformWatchFiles) {
            if (anyMatch(files, filename)) {
              devServer.watcher.emit("change", id);
            }
          }
          if (type === "add" || type === "unlink") {
            let clearedCache = false;
            for (const [id, files] of transformOptionalFiles) {
              if (anyMatch(files, filename)) {
                if (!clearedCache) {
                  baseConfig.cache.clear();
                  clearedCache = true;
                }
                devServer.watcher.emit("change", id);
              }
            }
          }
        });
      },
      async buildStart(inputOptions) {
        if (isBuild && linked && !isSSRBuild) {
          const serverMetaFile = await getServerManifestFile(root);
          this.addWatchFile(serverMetaFile);
          try {
            serverManifest = JSON.parse(await fs.promises.readFile(serverMetaFile, "utf-8"));
            inputOptions.input = toHTMLEntries(root, serverManifest.entries);
            for (const entry in serverManifest.entrySources) {
              entrySources.set(path.resolve(root, entry), serverManifest.entrySources[entry]);
            }
          } catch (err) {
            this.error(`You must run the "ssr" build before the "browser" build.`);
          }
          if (isEmpty(inputOptions.input)) {
            this.error("No Marko files were found when compiling the server.");
          }
        }
      },
      async resolveId(importee, importer, importOpts, ssr = importOpts.ssr) {
        var _a2;
        if (virtualFiles.has(importee)) {
          return importee;
        }
        let importeeQuery = getMarkoQuery(importee);
        if (importeeQuery) {
          importee = importee.slice(0, -importeeQuery.length);
        } else if (ssr && linked && importer && importer !== devEntryFile && isMarkoFile(importee) && !isMarkoFile(importer.replace(queryReg, ""))) {
          importeeQuery = serverEntryQuery;
        } else if (!ssr && isBuild && importer && isMarkoFile(importee) && ((_a2 = this.getModuleInfo(importer)) == null ? void 0 : _a2.isEntry)) {
          importeeQuery = browserEntryQuery;
        }
        if (importeeQuery) {
          const resolved = importee[0] === "." ? {
            id: normalizePath(importer ? path.resolve(importer, "..", importee) : path.resolve(root, importee))
          } : await this.resolve(importee, importer, resolveOpts);
          if (resolved) {
            resolved.id += importeeQuery;
          }
          return resolved;
        }
        if (importer) {
          const importerQuery = getMarkoQuery(importer);
          if (importerQuery) {
            importer = importer.slice(0, -importerQuery.length);
            if (importee[0] === ".") {
              const resolved = path.resolve(importer, "..", importee);
              if (resolved === importer)
                return resolved;
            }
            return this.resolve(importee, importer, resolveOpts);
          }
        }
        return null;
      },
      async load(id) {
        switch (getMarkoQuery(id)) {
          case serverEntryQuery: {
            const fileName = id.slice(0, -serverEntryQuery.length);
            let entryData;
            entrySources.set(fileName, "");
            if (isBuild) {
              const relativeFileName = path.posix.relative(root, fileName);
              const entryId = toEntryId(relativeFileName);
              serverManifest ?? (serverManifest = {
                entries: {},
                entrySources: {},
                chunksNeedingAssets: []
              });
              serverManifest.entries[entryId] = relativeFileName;
              entryData = JSON.stringify(entryId);
            } else {
              entryData = JSON.stringify(await generateDocManifest(await devServer.transformIndexHtml("/", generateInputDoc(fileNameToURL(fileName, root)))));
            }
            return server_entry_template_default({
              fileName,
              entryData,
              runtimeId
            });
          }
          case browserEntryQuery: {
            return entrySources.get(id.slice(0, -browserEntryQuery.length));
          }
        }
        return virtualFiles.get(id) || null;
      },
      async transformIndexHtml(html) {
        if (isBuild) {
          return html;
        }
        return html.replace(/(src\s*=\s*(['"])(?:(?!\2).)*\.marko)(?:\?((?:(?!\2).)*))?\2/gim, (_, prefix, quote, query) => prefix + browserEntryQuery + (query ? "&" + query : "") + quote);
      },
      async transform(source, id, ssr) {
        const query = getMarkoQuery(id);
        if (query && !query.startsWith(virtualFileQuery)) {
          id = id.slice(0, -query.length);
          if (query === serverEntryQuery) {
            id = `${id.slice(0, -markoExt.length)}.entry.marko`;
          }
        }
        if (!isMarkoFile(id)) {
          return null;
        }
        if (ssr && entrySources.has(id)) {
          entrySources.set(id, source);
          if (serverManifest) {
            serverManifest.entrySources[path.relative(root, id)] = source;
          }
        }
        const compiled = await compiler.compile(source, id, (typeof ssr === "object" ? ssr.ssr : ssr) ? ssrConfig : query === browserEntryQuery ? hydrateConfig : domConfig);
        const { map, meta } = compiled;
        let { code } = compiled;
        if (query !== browserEntryQuery && devServer) {
          code += `
if (import.meta.hot) import.meta.hot.accept();`;
        }
        if (devServer) {
          const templateName = getBasenameWithoutExt(id);
          const optionalFilePrefix = path.dirname(id) + path.sep + (templateName === "index" ? "" : `${templateName}.`);
          for (const file of meta.watchFiles) {
            this.addWatchFile(file);
          }
          transformOptionalFiles.set(id, [
            `${optionalFilePrefix}style.*`,
            `${optionalFilePrefix}component.*`,
            `${optionalFilePrefix}component-browser.*`,
            `${optionalFilePrefix}marko-tag.json`
          ]);
          transformWatchFiles.set(id, meta.watchFiles);
        }
        return { code, map, meta: isBuild ? { source } : void 0 };
      }
    },
    {
      name: "marko-vite:post",
      apply: "build",
      enforce: "post",
      async generateBundle(outputOptions, bundle, isWrite) {
        if (!linked) {
          return;
        }
        if (!isWrite) {
          this.error(`Linked builds are currently only supported when in "write" mode.`);
        }
        if (!serverManifest) {
          this.error("No Marko files were found when bundling the server in linked mode.");
        }
        if (isSSRBuild) {
          const dir = outputOptions.dir ? path.resolve(outputOptions.dir) : path.resolve(outputOptions.file, "..");
          for (const fileName in bundle) {
            const chunk = bundle[fileName];
            if (chunk.type === "chunk") {
              for (const id in chunk.modules) {
                if (id === registeredTag) {
                  serverManifest.chunksNeedingAssets.push(path.resolve(dir, fileName));
                  break;
                }
              }
            }
          }
          await fs.promises.writeFile(await getServerManifestFile(root), JSON.stringify(serverManifest));
        } else {
          const browserManifest = {};
          for (const entryId in serverManifest.entries) {
            const fileName = serverManifest.entries[entryId];
            let chunkId = fileName + htmlExt;
            let chunk = bundle[chunkId];
            if (!chunk) {
              chunkId = chunkId.replace(/\//g, "\\");
              chunk = bundle[chunkId];
            }
            if ((chunk == null ? void 0 : chunk.type) === "asset") {
              browserManifest[entryId] = await generateDocManifest(chunk.source.toString());
              delete bundle[chunkId];
            } else {
              this.error(`Marko template had unexpected output from vite, ${fileName}`);
            }
          }
          const manifestStr = `;var __MARKO_MANIFEST__=${JSON.stringify(browserManifest)};
`;
          for (const fileName of serverManifest.chunksNeedingAssets) {
            await fs.promises.appendFile(fileName, manifestStr);
          }
        }
      }
    }
  ];
}
function getMarkoQuery(id) {
  var _a;
  return ((_a = queryReg.exec(id)) == null ? void 0 : _a[0]) || "";
}
function isMarkoFile(id) {
  return id.endsWith(markoExt);
}
function toHTMLEntries(root, serverEntries) {
  const result = [];
  for (const id in serverEntries) {
    const markoFile = path.posix.join(root, serverEntries[id]);
    const htmlFile = markoFile + htmlExt;
    virtualFiles.set(htmlFile, {
      code: generateInputDoc(markoFile)
    });
    result.push(htmlFile);
  }
  return result;
}
async function getServerManifestFile(root) {
  return path.join(await getTempDir(root), "manifest.json");
}
function getTempDir(root) {
  return tempDir || (tempDir = (async () => {
    const dir = path.join(os.tmpdir(), `marko-vite-${crypto.createHash("SHA1").update(root).digest("hex")}`);
    try {
      const stat = await fs.promises.stat(dir);
      if (stat.isDirectory()) {
        return dir;
      }
    } catch {
      await fs.promises.mkdir(dir);
      return dir;
    }
    throw new Error("Unable to create temp directory");
  })());
}
function toEntryId(id) {
  const lastSepIndex = id.lastIndexOf(path.sep);
  let name = id.slice(lastSepIndex + 1, id.indexOf(".", lastSepIndex));
  if (name === "index" || name === "template") {
    name = id.slice(id.lastIndexOf(path.sep, lastSepIndex - 1) + 1, lastSepIndex);
  }
  return `${name}_${crypto.createHash("SHA1").update(id).digest("base64").replace(/[/+]/g, "-").slice(0, 4)}`;
}
function fileNameToURL(fileName, root) {
  const relativeURL = path.posix.relative(pathToFileURL(root).pathname, pathToFileURL(fileName).pathname);
  if (relativeURL[0] === ".") {
    throw new Error("@marko/vite: Entry templates must exist under the current root directory.");
  }
  return `/${relativeURL}`;
}
function getBasenameWithoutExt(file) {
  const baseStart = file.lastIndexOf(path.sep) + 1;
  const extStart = file.indexOf(".", baseStart + 1);
  return file.slice(baseStart, extStart);
}
function isEmpty(obj) {
  for (const _ in obj) {
    return false;
  }
  return true;
}
export {
  markoPlugin as default
};
