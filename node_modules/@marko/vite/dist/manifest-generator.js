"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var manifest_generator_exports = {};
__export(manifest_generator_exports, {
  generateDocManifest: () => generateDocManifest,
  generateInputDoc: () => generateInputDoc
});
module.exports = __toCommonJS(manifest_generator_exports);
var import_htmlparser2 = require("htmlparser2");
var import_domelementtype = require("domelementtype");
var import_domhandler = require("domhandler");
var import_serializer = __toESM(require("./serializer"));
const MARKER_COMMENT = "MARKO_VITE";
function generateDocManifest(rawHtml) {
  return new Promise((resolve, reject) => {
    const parser = new import_htmlparser2.Parser(new import_domhandler.DomHandler(function(err, dom) {
      if (err) {
        return reject(err);
      }
      const htmlChildren = dom.find(isElement).childNodes;
      const headPrepend = [];
      const head = [];
      const bodyPrepend = [];
      const body = [];
      splitNodesByMarker(htmlChildren.find((node) => isElement(node) && node.tagName === "head").childNodes, headPrepend, head);
      splitNodesByMarker(htmlChildren.find((node) => isElement(node) && node.tagName === "body").childNodes, bodyPrepend, body);
      resolve({
        "head-prepend": serializeOrNull(headPrepend),
        head: serializeOrNull(head),
        "body-prepend": serializeOrNull(bodyPrepend),
        body: serializeOrNull(body)
      });
    }));
    parser.write(rawHtml);
    parser.end();
  });
}
function generateInputDoc(entry) {
  return `<!DOCTYPE html><html><head><!--${MARKER_COMMENT}--></head><body><!--${MARKER_COMMENT}--><script async type="module" src=${JSON.stringify(entry)}><\/script></body></html>`;
}
function serializeOrNull(nodes) {
  const result = (0, import_serializer.default)(nodes);
  if (result.length) {
    return result;
  }
  return null;
}
function splitNodesByMarker(nodes, before, after) {
  for (let i = 0; i < nodes.length; i++) {
    let node = nodes[i];
    if (node.data === MARKER_COMMENT) {
      i++;
      for (; i < nodes.length; i++) {
        node = nodes[i];
        after.push(node);
      }
      break;
    }
    before.push(node);
  }
}
function isElement(node) {
  return node.type === import_domelementtype.ElementType.Tag;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  generateDocManifest,
  generateInputDoc
});
